import { DocumentParts, inline, NewLine } from '../output/writer'
import { paramsFactory } from './params-factory'
import { appClient } from './app-client'
import { deployTypes } from './deploy-types'
import { utilityTypes } from './utility-types'
import { imports } from './imports'
import { createGeneratorContext, GeneratorOptions } from './generator-context'
import { appTypes } from './app-types'
import { callComposerType } from './call-composer-types'
import { Arc56Contract, StructField } from '@algorandfoundation/algokit-utils/types/app-arc56'
import { appFactory } from './app-factory'
import { Sanitizer } from '../util/sanitization'

function convertStructs(s: StructField[], sanitizer: Sanitizer): StructField[] {
  return s.map(
    ({ name, type }) =>
      ({
        name: sanitizer.makeSafePropertyIdentifier(name),
        type: typeof type === 'string' ? type : convertStructs(type, sanitizer),
      }) satisfies StructField,
  )
}

// TODO: NC - This can be cleaned up further
function shrinkAppSpec(app: Arc56Contract, isSlim: boolean = false): Arc56Contract {
  const strippedApp = { ...app } satisfies Arc56Contract

  if (strippedApp.sourceInfo?.approval?.sourceInfo) {
    // Keep only source info entries that have errorMessage
    strippedApp.sourceInfo.approval.sourceInfo = strippedApp.sourceInfo.approval.sourceInfo
      .filter((entry) => entry.errorMessage)
      .map((entry) => ({
        pc: entry.pc,
        errorMessage: entry.errorMessage,
        // Keep minimal context for error mapping if available
        ...(entry.teal !== undefined && { teal: entry.teal }),
      }))
  }

  if (strippedApp.sourceInfo?.clear?.sourceInfo) {
    // Apply same logic to clear program source info
    strippedApp.sourceInfo.clear.sourceInfo = strippedApp.sourceInfo.clear.sourceInfo
      .filter((entry) => entry.errorMessage)
      .map((entry) => ({
        pc: entry.pc,
        errorMessage: entry.errorMessage,
        // Keep minimal context for error mapping if available
        ...(entry.teal !== undefined && { teal: entry.teal }),
      }))
  }

  if (strippedApp.compilerInfo) {
    delete strippedApp.compilerInfo
  }

  // These are needed for deployment but not for calling existing contracts
  if (isSlim) {
    if (strippedApp.source) {
      delete strippedApp.source
    }
    if (strippedApp.byteCode) {
      delete strippedApp.byteCode
    }
    if (strippedApp.templateVariables) {
      delete strippedApp.templateVariables
    }
    if (strippedApp.scratchVariables) {
      delete strippedApp.scratchVariables
    }
  }
  return strippedApp
}

export function* generate(app: Arc56Contract, options: GeneratorOptions = { preserveNames: false }): DocumentParts {
  // Apply source info stripping if slim mode is enabled
  const reduceAppSpec = shrinkAppSpec(app, options.slim)

  const ctx = createGeneratorContext(reduceAppSpec, options)
  yield `/* eslint-disable */`
  yield `/**`
  yield ` * This file was automatically generated by @algorandfoundation/algokit-client-generator.`
  yield ` * DO NOT MODIFY IT BY HAND.`
  yield ` * requires: @algorandfoundation/algokit-utils: ^7`
  yield ` */`

  yield* imports(ctx)
  // Change the structs definition to sanitize property names according to the defined rules
  // for instance, this may (unless you passed in --preserve-names) convert properties like my_prop to myProp
  reduceAppSpec.structs = Object.fromEntries(
    Object.keys(reduceAppSpec.structs).map((key) => [key, convertStructs(reduceAppSpec.structs[key], ctx.sanitizer)]),
  )
  yield* inline('export const APP_SPEC: Arc56Contract = ', JSON.stringify(reduceAppSpec), ' as unknown as Arc56Contract')
  yield NewLine

  yield* utilityTypes()
  yield NewLine
  yield* appTypes(ctx)

  // Only generate deploy types if not in slim mode
  if (!ctx.slim) {
    yield* deployTypes(ctx)
  }
  yield NewLine

  // Write a call factory
  yield* paramsFactory(ctx)
  yield NewLine
  // Write a factory only if not in slim mode
  if (!ctx.slim) {
    yield* appFactory(ctx)
  }
  // Write a client
  yield* appClient(ctx)

  yield* callComposerType(ctx)
}
