/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'

import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Nested","structs":{},"methods":[{"name":"add","args":[{"type":"uint64","name":"a"},{"type":"uint64","name":"b"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_pay_txn_amount","args":[{"type":"pay","name":"pay_txn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"nested_method_call","args":[{"type":"string","name":"_"},{"type":"pay","name":"_pay_txn"},{"type":"appl","name":"method_call"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[50,91,117],"errorMessage":"OnCompletion is not NoOp"},{"pc":[144],"errorMessage":"can only call when creating"},{"pc":[53,94,120],"errorMessage":"can only call when not creating"},{"pc":[78],"errorMessage":"transaction type is appl"},{"pc":[67,104],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"events":[]} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Nested contract
 */
export type NestedArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'add(uint64,uint64)uint64': {
      a: bigint | number
      b: bigint | number
    }
    'get_pay_txn_amount(pay)uint64': {
      payTxn: AppMethodCallTransactionArgument
    }
    'nested_method_call(string,pay,appl)byte[]': {
      _: string
      _payTxn?: AppMethodCallTransactionArgument
      methodCall: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'add(uint64,uint64)uint64': [a: bigint | number, b: bigint | number]
    'get_pay_txn_amount(pay)uint64': [payTxn: AppMethodCallTransactionArgument]
    'nested_method_call(string,pay,appl)byte[]': [_: string, _payTxn: AppMethodCallTransactionArgument | undefined, methodCall: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type NestedReturns = {
  'add(uint64,uint64)uint64': bigint
  'get_pay_txn_amount(pay)uint64': bigint
  'nested_method_call(string,pay,appl)byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the Nested smart contract.
 */
export type NestedTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'add(uint64,uint64)uint64' | 'add', {
      argsObj: NestedArgs['obj']['add(uint64,uint64)uint64']
      argsTuple: NestedArgs['tuple']['add(uint64,uint64)uint64']
      returns: NestedReturns['add(uint64,uint64)uint64']
    }>
    & Record<'get_pay_txn_amount(pay)uint64' | 'get_pay_txn_amount', {
      argsObj: NestedArgs['obj']['get_pay_txn_amount(pay)uint64']
      argsTuple: NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']
      returns: NestedReturns['get_pay_txn_amount(pay)uint64']
    }>
    & Record<'nested_method_call(string,pay,appl)byte[]' | 'nested_method_call', {
      argsObj: NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]']
      argsTuple: NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']
      returns: NestedReturns['nested_method_call(string,pay,appl)byte[]']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type NestedSignatures = keyof NestedTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NestedNonVoidMethodSignatures = keyof NestedTypes['methods'] extends infer T ? T extends keyof NestedTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Nested smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NestedSignatures> = NestedTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Nested smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NestedSignatures> = NestedTypes['methods'][TSignature]['returns']



/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Nested smart contract
 */
export abstract class NestedParamsFactory {
  /**
   * Constructs a no op call for the add(uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static add(params: CallParams<NestedArgs['obj']['add(uint64,uint64)uint64'] | NestedArgs['tuple']['add(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a, params.args.b],
    }
  }
  /**
   * Constructs a no op call for the get_pay_txn_amount(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPayTxnAmount(params: CallParams<NestedArgs['obj']['get_pay_txn_amount(pay)uint64'] | NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_pay_txn_amount(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn],
    }
  }
  /**
   * Constructs a no op call for the nested_method_call(string,pay,appl)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nestedMethodCall(params: CallParams<NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]'] | NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nested_method_call(string,pay,appl)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args._, params.args._payTxn, params.args.methodCall],
    }
  }
}

/**
 * A client to make calls to the Nested smart contract
 */
export class NestedClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NestedClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Nested app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NestedClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NestedNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `NestedClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NestedClient> {
    return new NestedClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NestedClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NestedClient> {
    return new NestedClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Nested smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Nested smart contract using the `add(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    add: (params: CallParams<NestedArgs['obj']['add(uint64,uint64)uint64'] | NestedArgs['tuple']['add(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NestedParamsFactory.add(params))
    },

    /**
     * Makes a call to the Nested smart contract using the `get_pay_txn_amount(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPayTxnAmount: (params: CallParams<NestedArgs['obj']['get_pay_txn_amount(pay)uint64'] | NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NestedParamsFactory.getPayTxnAmount(params))
    },

    /**
     * Makes a call to the Nested smart contract using the `nested_method_call(string,pay,appl)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    nestedMethodCall: (params: CallParams<NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]'] | NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NestedParamsFactory.nestedMethodCall(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Nested smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Nested smart contract using the `add(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    add: (params: CallParams<NestedArgs['obj']['add(uint64,uint64)uint64'] | NestedArgs['tuple']['add(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NestedParamsFactory.add(params))
    },

    /**
     * Makes a call to the Nested smart contract using the `get_pay_txn_amount(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPayTxnAmount: (params: CallParams<NestedArgs['obj']['get_pay_txn_amount(pay)uint64'] | NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NestedParamsFactory.getPayTxnAmount(params))
    },

    /**
     * Makes a call to the Nested smart contract using the `nested_method_call(string,pay,appl)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    nestedMethodCall: (params: CallParams<NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]'] | NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NestedParamsFactory.nestedMethodCall(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Nested smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Nested smart contract using the `add(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    add: async (params: CallParams<NestedArgs['obj']['add(uint64,uint64)uint64'] | NestedArgs['tuple']['add(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NestedParamsFactory.add(params))
      return {...result, return: result.return as unknown as (undefined | NestedReturns['add(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the Nested smart contract using the `get_pay_txn_amount(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPayTxnAmount: async (params: CallParams<NestedArgs['obj']['get_pay_txn_amount(pay)uint64'] | NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NestedParamsFactory.getPayTxnAmount(params))
      return {...result, return: result.return as unknown as (undefined | NestedReturns['get_pay_txn_amount(pay)uint64'])}
    },

    /**
     * Makes a call to the Nested smart contract using the `nested_method_call(string,pay,appl)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    nestedMethodCall: async (params: CallParams<NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]'] | NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NestedParamsFactory.nestedMethodCall(params))
      return {...result, return: result.return as unknown as (undefined | NestedReturns['nested_method_call(string,pay,appl)byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NestedClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Nested app
   */
  state = {
  }

  public newGroup(): NestedComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a add(uint64,uint64)uint64 method call against the Nested contract
       */
      add(params: CallParams<NestedArgs['obj']['add(uint64,uint64)uint64'] | NestedArgs['tuple']['add(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.add(params)))
        resultMappers.push((v) => client.decodeReturnValue('add(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_pay_txn_amount(pay)uint64 method call against the Nested contract
       */
      getPayTxnAmount(params: CallParams<NestedArgs['obj']['get_pay_txn_amount(pay)uint64'] | NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPayTxnAmount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_pay_txn_amount(pay)uint64', v))
        return this
      },
      /**
       * Add a nested_method_call(string,pay,appl)byte[] method call against the Nested contract
       */
      nestedMethodCall(params: CallParams<NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]'] | NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nestedMethodCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('nested_method_call(string,pay,appl)byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the Nested contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NestedComposer
  }
}
export type NestedComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  add(params?: CallParams<NestedArgs['obj']['add(uint64,uint64)uint64'] | NestedArgs['tuple']['add(uint64,uint64)uint64']>): NestedComposer<[...TReturns, NestedReturns['add(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the get_pay_txn_amount(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPayTxnAmount(params?: CallParams<NestedArgs['obj']['get_pay_txn_amount(pay)uint64'] | NestedArgs['tuple']['get_pay_txn_amount(pay)uint64']>): NestedComposer<[...TReturns, NestedReturns['get_pay_txn_amount(pay)uint64'] | undefined]>

  /**
   * Calls the nested_method_call(string,pay,appl)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nestedMethodCall(params?: CallParams<NestedArgs['obj']['nested_method_call(string,pay,appl)byte[]'] | NestedArgs['tuple']['nested_method_call(string,pay,appl)byte[]']>): NestedComposer<[...TReturns, NestedReturns['nested_method_call(string,pay,appl)byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Nested smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NestedComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NestedComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NestedComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NestedComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NestedComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NestedComposerResults<TReturns>>
}
export type NestedComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

