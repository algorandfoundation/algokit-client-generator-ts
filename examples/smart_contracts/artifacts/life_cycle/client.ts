/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"LifeCycle","structs":{},"methods":[{"name":"create","args":[{"name":"greeting","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"create","args":[{"name":"greeting","type":"string"},{"name":"times","type":"uint32"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"hello","args":[{"name":"name","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"hello","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"close_out_test","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["CloseOut"]}},{"name":"delete_test","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"update_test","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}}],"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"greeting":{"key":"Z3JlZXRpbmc=","keyType":"AVMString","valueType":"AVMBytes"},"times":{"key":"dGltZXM=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp","OptIn"],"call":["UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LifeCycle contract
 */
export type LifeCycleArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(string)string': {
      greeting: string
    }
    'create(string,uint32)void': {
      greeting: string
      times: bigint | number
    }
    'hello(string)string': {
      name: string
    }
    'hello()string': Record<string, never>
    'close_out_test()string': Record<string, never>
    'delete_test()string': Record<string, never>
    'update_test()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(string)string': [greeting: string]
    'create(string,uint32)void': [greeting: string, times: bigint | number]
    'hello(string)string': [name: string]
    'hello()string': []
    'close_out_test()string': []
    'delete_test()string': []
    'update_test()string': []
  }
}

/**
 * The return type for each method
 */
export type LifeCycleReturns = {
  'create(string)string': string
  'create(string,uint32)void': void
  'hello(string)string': string
  'hello()string': string
  'close_out_test()string': string
  'delete_test()string': string
  'update_test()string': string
}

/**
 * Defines the types of available calls and state of the LifeCycle smart contract.
 */
export type LifeCycleTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(string)string', {
      argsObj: LifeCycleArgs['obj']['create(string)string']
      argsTuple: LifeCycleArgs['tuple']['create(string)string']
      returns: LifeCycleReturns['create(string)string']
    }>
    & Record<'create(string,uint32)void', {
      argsObj: LifeCycleArgs['obj']['create(string,uint32)void']
      argsTuple: LifeCycleArgs['tuple']['create(string,uint32)void']
      returns: LifeCycleReturns['create(string,uint32)void']
    }>
    & Record<'hello(string)string', {
      argsObj: LifeCycleArgs['obj']['hello(string)string']
      argsTuple: LifeCycleArgs['tuple']['hello(string)string']
      returns: LifeCycleReturns['hello(string)string']
    }>
    & Record<'hello()string', {
      argsObj: LifeCycleArgs['obj']['hello()string']
      argsTuple: LifeCycleArgs['tuple']['hello()string']
      returns: LifeCycleReturns['hello()string']
    }>
    & Record<'close_out_test()string' | 'close_out_test', {
      argsObj: LifeCycleArgs['obj']['close_out_test()string']
      argsTuple: LifeCycleArgs['tuple']['close_out_test()string']
      returns: LifeCycleReturns['close_out_test()string']
    }>
    & Record<'delete_test()string' | 'delete_test', {
      argsObj: LifeCycleArgs['obj']['delete_test()string']
      argsTuple: LifeCycleArgs['tuple']['delete_test()string']
      returns: LifeCycleReturns['delete_test()string']
    }>
    & Record<'update_test()string' | 'update_test', {
      argsObj: LifeCycleArgs['obj']['update_test()string']
      argsTuple: LifeCycleArgs['tuple']['update_test()string']
      returns: LifeCycleReturns['update_test()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        greeting: BinaryState
        times: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LifeCycleSignatures = keyof LifeCycleTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LifeCycleNonVoidMethodSignatures = keyof LifeCycleTypes['methods'] extends infer T ? T extends keyof LifeCycleTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LifeCycle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LifeCycleSignatures> = LifeCycleTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LifeCycle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LifeCycleSignatures> = LifeCycleTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LifeCycleTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LifeCycleCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC} & CreateSchema>
  | Expand<CallParams<LifeCycleArgs['obj']['create(string)string'] | LifeCycleArgs['tuple']['create(string)string']> & {method: 'create(string)string'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<LifeCycleArgs['obj']['create(string,uint32)void'] | LifeCycleArgs['tuple']['create(string,uint32)void']> & {method: 'create(string,uint32)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type LifeCycleUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
  | Expand<CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & {method: 'update_test'}>
  | Expand<CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & {method: 'update_test()string'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type LifeCycleDeleteCallParams =
  | Expand<CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']> & {method: 'delete_test'}>
  | Expand<CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']> & {method: 'delete_test()string'}>
/**
 * Defines arguments required for the deploy method.
 */
export type LifeCycleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LifeCycleCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: LifeCycleUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: LifeCycleDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LifeCycle smart contract
 */
export abstract class LifeCycleParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends LifeCycleCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create(string)string':
            return LifeCycleParamsFactory.create.createStringString(params)
          case 'create(string,uint32)void':
            return LifeCycleParamsFactory.create.createStringUint32Void(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the LifeCycle smart contract using the create(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createStringString(params: CallParams<LifeCycleArgs['obj']['create(string)string'] | LifeCycleArgs['tuple']['create(string)string']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.greeting],
        }
      },
      /**
       * Constructs create ABI call params for the LifeCycle smart contract using the create(string,uint32)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createStringUint32Void(params: CallParams<LifeCycleArgs['obj']['create(string,uint32)void'] | LifeCycleArgs['tuple']['create(string,uint32)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(string,uint32)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.greeting, params.args.times],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends LifeCycleUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update_test':
          case 'update_test()string':
            return LifeCycleParamsFactory.update.updateTest(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the LifeCycle smart contract using the update_test()string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateTest(params: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update_test()string' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends LifeCycleDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_test':
          case 'delete_test()string':
            return LifeCycleParamsFactory.delete.deleteTest(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the LifeCycle smart contract using the delete_test()string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteTest(params: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_test()string' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available closeOut ABI call param factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs close out ABI call params for the LifeCycle smart contract using the close_out_test()string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      closeOutTest(params: CallParams<LifeCycleArgs['obj']['close_out_test()string'] | LifeCycleArgs['tuple']['close_out_test()string']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'close_out_test()string' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static helloStringString(params: CallParams<LifeCycleArgs['obj']['hello(string)string'] | LifeCycleArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the hello()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static helloString(params: CallParams<LifeCycleArgs['obj']['hello()string'] | LifeCycleArgs['tuple']['hello()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LifeCycle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LifeCycleFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LifeCycleFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LifeCycleClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LifeCycleClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LifeCycle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LifeCycleDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? LifeCycleParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (LifeCycleCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? LifeCycleParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (LifeCycleUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? LifeCycleParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (LifeCycleDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new LifeCycleClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the LifeCycle smart contract using the create(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createStringString: (params: CallParams<LifeCycleArgs['obj']['create(string)string'] | LifeCycleArgs['tuple']['create(string)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(LifeCycleParamsFactory.create.createStringString(params))
      },
      /**
       * Creates a new instance of the LifeCycle smart contract using the create(string,uint32)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createStringUint32Void: (params: CallParams<LifeCycleArgs['obj']['create(string,uint32)void'] | LifeCycleArgs['tuple']['create(string,uint32)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(LifeCycleParamsFactory.create.createStringUint32Void(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
      /**
       * Updates an existing instance of the LifeCycle smart contract using the update_test()string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateTest: (params: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(LifeCycleParamsFactory.update.updateTest(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the LifeCycle smart contract using the delete_test()string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteTest: (params: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']> = {args: []}) => {
        return this.appFactory.params.deployDelete(LifeCycleParamsFactory.delete.deleteTest(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
      /**
       * Creates a new instance of the LifeCycle smart contract using the create(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createStringString: (params: CallParams<LifeCycleArgs['obj']['create(string)string'] | LifeCycleArgs['tuple']['create(string)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(LifeCycleParamsFactory.create.createStringString(params))
      },
      /**
       * Creates a new instance of the LifeCycle smart contract using the create(string,uint32)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createStringUint32Void: (params: CallParams<LifeCycleArgs['obj']['create(string,uint32)void'] | LifeCycleArgs['tuple']['create(string,uint32)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(LifeCycleParamsFactory.create.createStringUint32Void(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LifeCycleClient(result.appClient) }
      },
      /**
       * Creates a new instance of the LifeCycle smart contract using an ABI method call using the create(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createStringString: async (params: CallParams<LifeCycleArgs['obj']['create(string)string'] | LifeCycleArgs['tuple']['create(string)string']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(LifeCycleParamsFactory.create.createStringString(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | LifeCycleReturns['create(string)string']) }, appClient: new LifeCycleClient(result.appClient) }
      },
      /**
       * Creates a new instance of the LifeCycle smart contract using an ABI method call using the create(string,uint32)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createStringUint32Void: async (params: CallParams<LifeCycleArgs['obj']['create(string,uint32)void'] | LifeCycleArgs['tuple']['create(string,uint32)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(LifeCycleParamsFactory.create.createStringUint32Void(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | LifeCycleReturns['create(string,uint32)void']) }, appClient: new LifeCycleClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LifeCycle smart contract
 */
export class LifeCycleClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LifeCycleClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LifeCycle app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LifeCycleClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LifeCycleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `LifeCycleClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LifeCycleClient> {
    return new LifeCycleClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LifeCycleClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LifeCycleClient> {
    return new LifeCycleClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
      /**
       * Updates an existing instance of the LifeCycle smart contract using the `update_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateTest: (params: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(LifeCycleParamsFactory.update.updateTest(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the LifeCycle smart contract using the `delete_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteTest: (params: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']> = {args: []}) => {
        return this.appClient.params.delete(LifeCycleParamsFactory.delete.deleteTest(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the LifeCycle smart contract using the `close_out_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      closeOutTest: (params: CallParams<LifeCycleArgs['obj']['close_out_test()string'] | LifeCycleArgs['tuple']['close_out_test()string']> = {args: []}) => {
        return this.appClient.params.closeOut(LifeCycleParamsFactory.closeOut.closeOutTest(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the LifeCycle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LifeCycle smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    helloStringString: (params: CallParams<LifeCycleArgs['obj']['hello(string)string'] | LifeCycleArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LifeCycleParamsFactory.helloStringString(params))
    },

    /**
     * Makes a call to the LifeCycle smart contract using the `hello()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    helloString: (params: CallParams<LifeCycleArgs['obj']['hello()string'] | LifeCycleArgs['tuple']['hello()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LifeCycleParamsFactory.helloString(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
      /**
       * Updates an existing instance of the LifeCycle smart contract using the `update_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateTest: (params: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(LifeCycleParamsFactory.update.updateTest(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the LifeCycle smart contract using the `delete_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteTest: (params: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']> = {args: []}) => {
        return this.appClient.createTransaction.delete(LifeCycleParamsFactory.delete.deleteTest(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the LifeCycle smart contract using the `close_out_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      closeOutTest: (params: CallParams<LifeCycleArgs['obj']['close_out_test()string'] | LifeCycleArgs['tuple']['close_out_test()string']> = {args: []}) => {
        return this.appClient.createTransaction.closeOut(LifeCycleParamsFactory.closeOut.closeOutTest(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the LifeCycle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LifeCycle smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    helloStringString: (params: CallParams<LifeCycleArgs['obj']['hello(string)string'] | LifeCycleArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LifeCycleParamsFactory.helloStringString(params))
    },

    /**
     * Makes a call to the LifeCycle smart contract using the `hello()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    helloString: (params: CallParams<LifeCycleArgs['obj']['hello()string'] | LifeCycleArgs['tuple']['hello()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LifeCycleParamsFactory.helloString(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the LifeCycle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
      /**
       * Updates an existing instance of the LifeCycle smart contract using the `update_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateTest: async (params: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(LifeCycleParamsFactory.update.updateTest(params))
        return {...result, return: result.return as unknown as (undefined | LifeCycleReturns['update_test()string'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the LifeCycle smart contract using the `delete_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteTest: async (params: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(LifeCycleParamsFactory.delete.deleteTest(params))
        return {...result, return: result.return as unknown as (undefined | LifeCycleReturns['delete_test()string'])}
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the LifeCycle smart contract using the `close_out_test()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      closeOutTest: async (params: CallParams<LifeCycleArgs['obj']['close_out_test()string'] | LifeCycleArgs['tuple']['close_out_test()string']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.closeOut(LifeCycleParamsFactory.closeOut.closeOutTest(params))
        return {...result, return: result.return as unknown as (undefined | LifeCycleReturns['close_out_test()string'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the LifeCycle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LifeCycle smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    helloStringString: async (params: CallParams<LifeCycleArgs['obj']['hello(string)string'] | LifeCycleArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LifeCycleParamsFactory.helloStringString(params))
      return {...result, return: result.return as unknown as (undefined | LifeCycleReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the LifeCycle smart contract using the `hello()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    helloString: async (params: CallParams<LifeCycleArgs['obj']['hello()string'] | LifeCycleArgs['tuple']['hello()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LifeCycleParamsFactory.helloString(params))
      return {...result, return: result.return as unknown as (undefined | LifeCycleReturns['hello()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LifeCycleClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LifeCycle app
   */
  state = {
    /**
     * Methods to access global state for the current LifeCycle app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          greeting: new BinaryStateValue(result.greeting),
          times: result.times,
        }
      },
      /**
       * Get the current value of the greeting key in global state
       */
      greeting: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("greeting")) as Uint8Array | undefined) },
      /**
       * Get the current value of the times key in global state
       */
      times: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("times")) as bigint | undefined },
    },
  }

  public newGroup(): LifeCycleComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the LifeCycle contract
       */
      helloStringString(params: CallParams<LifeCycleArgs['obj']['hello(string)string'] | LifeCycleArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.helloStringString(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a hello()string method call against the LifeCycle contract
       */
      helloString(params: CallParams<LifeCycleArgs['obj']['hello()string'] | LifeCycleArgs['tuple']['hello()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.helloString(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello()string', v))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
          updateTest: (params: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateTest(params)))
            resultMappers.push((v) => client.decodeReturnValue('update_test()string', v))
            return this
          },
        }
      },
      get delete() {
        return {
          deleteTest: (params: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteTest(params)))
            resultMappers.push((v) => client.decodeReturnValue('delete_test()string', v))
            return this
          },
        }
      },
      get closeOut() {
        return {
          closeOutTest: (params: CallParams<LifeCycleArgs['obj']['close_out_test()string'] | LifeCycleArgs['tuple']['close_out_test()string']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut.closeOutTest(params)))
            resultMappers.push((v) => client.decodeReturnValue('close_out_test()string', v))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the LifeCycle contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LifeCycleComposer
  }
}
export type LifeCycleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  helloStringString(params?: CallParams<LifeCycleArgs['obj']['hello(string)string'] | LifeCycleArgs['tuple']['hello(string)string']>): LifeCycleComposer<[...TReturns, LifeCycleReturns['hello(string)string'] | undefined]>

  /**
   * Calls the hello()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  helloString(params?: CallParams<LifeCycleArgs['obj']['hello()string'] | LifeCycleArgs['tuple']['hello()string']>): LifeCycleComposer<[...TReturns, LifeCycleReturns['hello()string'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the LifeCycle smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): LifeCycleComposer<[...TReturns, undefined]>
    /**
     * Updates an existing instance of the LifeCycle smart contract using the update_test()string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateTest(params?: CallParams<LifeCycleArgs['obj']['update_test()string'] | LifeCycleArgs['tuple']['update_test()string']>): LifeCycleComposer<[...TReturns, LifeCycleReturns['update_test()string'] | undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the LifeCycle smart contract using the delete_test()string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteTest(params?: CallParams<LifeCycleArgs['obj']['delete_test()string'] | LifeCycleArgs['tuple']['delete_test()string']>): LifeCycleComposer<[...TReturns, LifeCycleReturns['delete_test()string'] | undefined]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the LifeCycle smart contract using the close_out_test()string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    closeOutTest(params?: CallParams<LifeCycleArgs['obj']['close_out_test()string'] | LifeCycleArgs['tuple']['close_out_test()string']>): LifeCycleComposer<[...TReturns, LifeCycleReturns['close_out_test()string'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the LifeCycle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LifeCycleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LifeCycleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LifeCycleComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LifeCycleComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LifeCycleComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LifeCycleComposerResults<TReturns>>
}
export type LifeCycleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

