/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'

import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"VotingRound","structs":{"VotingPreconditions":[{"name":"isVotingOpen","type":"uint64"},{"name":"isAllowedToVote","type":"uint64"},{"name":"hasAlreadyVoted","type":"uint64"},{"name":"currentTime","type":"uint64"}]},"methods":[{"name":"get_preconditions","args":[{"name":"signature","type":"byte[]"}],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"VotingPreconditions"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"create","args":[{"name":"vote_id","type":"string"},{"name":"snapshot_public_key","type":"byte[]"},{"name":"metadata_ipfs_cid","type":"string"},{"name":"start_time","type":"uint64"},{"name":"end_time","type":"uint64"},{"name":"option_counts","type":"uint8[]"},{"name":"quorum","type":"uint64"},{"name":"nft_image_url","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","args":[{"name":"fund_min_bal_req","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"close","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"vote","args":[{"name":"fund_min_bal_req","type":"pay"},{"name":"signature","type":"byte[]"},{"name":"answer_ids","type":"uint8[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":8,"bytes":5},"local":{"ints":0,"bytes":0}},"keys":{"global":{"close_time":{"key":"Y2xvc2VfdGltZQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the time the vote was closed"},"end_time":{"key":"ZW5kX3RpbWU=","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the ending time of voting_round"},"is_bootstrapped":{"key":"aXNfYm9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64","desc":"Whether or not the contract has been bootstrapped with answers"},"metadata_ipfs_cid":{"key":"bWV0YWRhdGFfaXBmc19jaWQ=","keyType":"AVMString","valueType":"AVMBytes","desc":"The IPFS content ID of the voting_round metadata file"},"nft_asset_id":{"key":"bmZ0X2Fzc2V0X2lk","keyType":"AVMString","valueType":"AVMUint64","desc":"The asset ID of a result NFT if one has been created"},"nft_image_url":{"key":"bmZ0X2ltYWdlX3VybA==","keyType":"AVMString","valueType":"AVMBytes","desc":"The IPFS URL of the default image to use as the media of the result NFT"},"option_counts":{"key":"b3B0aW9uX2NvdW50cw==","keyType":"AVMString","valueType":"AVMBytes","desc":"The number of options for each question"},"quorum":{"key":"cXVvcnVt","keyType":"AVMString","valueType":"AVMUint64","desc":"The minimum number of voters to reach quorum"},"snapshot_public_key":{"key":"c25hcHNob3RfcHVibGljX2tleQ==","keyType":"AVMString","valueType":"AVMBytes","desc":"The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot"},"start_time":{"key":"c3RhcnRfdGltZQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the starting time of voting_round"},"total_options":{"key":"dG90YWxfb3B0aW9ucw==","keyType":"AVMString","valueType":"AVMUint64","desc":"The total number of options"},"vote_id":{"key":"dm90ZV9pZA==","keyType":"AVMString","valueType":"AVMBytes","desc":"The identifier of this voting_round round"},"voter_count":{"key":"dm90ZXJfY291bnQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"The minimum number of voters who have voted"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":["DeleteApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type VotingPreconditions = {
  isVotingOpen: bigint,
  isAllowedToVote: bigint,
  hasAlreadyVoted: bigint,
  currentTime: bigint
}


/**
 * Converts the ABI tuple representation of a VotingPreconditions to the struct representation
 */
export function VotingPreconditionsFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VotingPreconditions, APP_SPEC.structs) as VotingPreconditions
}

/**
 * The argument types for the VotingRound contract
 */
export type VotingRoundArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': {
      signature: Uint8Array
    }
    'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': {
      voteId: string
      snapshotPublicKey: Uint8Array
      metadataIpfsCid: string
      startTime: bigint | number
      endTime: bigint | number
      optionCounts: bigint[] | number[]
      quorum: bigint | number
      nftImageUrl: string
    }
    'bootstrap(pay)void': {
      fundMinBalReq: AppMethodCallTransactionArgument
    }
    'close()void': Record<string, never>
    'vote(pay,byte[],uint8[])void': {
      fundMinBalReq: AppMethodCallTransactionArgument
      signature: Uint8Array
      answerIds: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': [signature: Uint8Array]
    'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': [voteId: string, snapshotPublicKey: Uint8Array, metadataIpfsCid: string, startTime: bigint | number, endTime: bigint | number, optionCounts: bigint[] | number[], quorum: bigint | number, nftImageUrl: string]
    'bootstrap(pay)void': [fundMinBalReq: AppMethodCallTransactionArgument]
    'close()void': []
    'vote(pay,byte[],uint8[])void': [fundMinBalReq: AppMethodCallTransactionArgument, signature: Uint8Array, answerIds: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type VotingRoundReturns = {
  'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': VotingPreconditions
  'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': void
  'bootstrap(pay)void': void
  'close()void': void
  'vote(pay,byte[],uint8[])void': void
}

/**
 * Defines the types of available calls and state of the VotingRound smart contract.
 */
export type VotingRoundTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_preconditions(byte[])(uint64,uint64,uint64,uint64)' | 'get_preconditions', {
      argsObj: VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
      argsTuple: VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
      returns: VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
    }>
    & Record<'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void' | 'create', {
      argsObj: VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
      argsTuple: VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
      returns: VotingRoundReturns['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
    }>
    & Record<'bootstrap(pay)void' | 'bootstrap', {
      argsObj: VotingRoundArgs['obj']['bootstrap(pay)void']
      argsTuple: VotingRoundArgs['tuple']['bootstrap(pay)void']
      returns: VotingRoundReturns['bootstrap(pay)void']
    }>
    & Record<'close()void' | 'close', {
      argsObj: VotingRoundArgs['obj']['close()void']
      argsTuple: VotingRoundArgs['tuple']['close()void']
      returns: VotingRoundReturns['close()void']
    }>
    & Record<'vote(pay,byte[],uint8[])void' | 'vote', {
      argsObj: VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void']
      argsTuple: VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']
      returns: VotingRoundReturns['vote(pay,byte[],uint8[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * The unix timestamp of the time the vote was closed
         */
        closeTime: bigint
        /**
         * The unix timestamp of the ending time of voting_round
         */
        endTime: bigint
        /**
         * Whether or not the contract has been bootstrapped with answers
         */
        isBootstrapped: bigint
        /**
         * The IPFS content ID of the voting_round metadata file
         */
        metadataIpfsCid: BinaryState
        /**
         * The asset ID of a result NFT if one has been created
         */
        nftAssetId: bigint
        /**
         * The IPFS URL of the default image to use as the media of the result NFT
         */
        nftImageUrl: BinaryState
        /**
         * The number of options for each question
         */
        optionCounts: BinaryState
        /**
         * The minimum number of voters to reach quorum
         */
        quorum: bigint
        /**
         * The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot
         */
        snapshotPublicKey: BinaryState
        /**
         * The unix timestamp of the starting time of voting_round
         */
        startTime: bigint
        /**
         * The total number of options
         */
        totalOptions: bigint
        /**
         * The identifier of this voting_round round
         */
        voteId: BinaryState
        /**
         * The minimum number of voters who have voted
         */
        voterCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VotingRoundSignatures = keyof VotingRoundTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VotingRoundNonVoidMethodSignatures = keyof VotingRoundTypes['methods'] extends infer T ? T extends keyof VotingRoundTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the VotingRound smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VotingRoundSignatures> = VotingRoundTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VotingRound smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingRoundSignatures> = VotingRoundTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VotingRoundTypes['state']['global']['keys']



/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the VotingRound smart contract
 */
export abstract class VotingRoundParamsFactory {
  /**
   * Constructs a no op call for the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPreconditions(params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_preconditions(byte[])(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundMinBalReq],
    }
  }
  /**
   * Constructs a no op call for the close()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static close(params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'close()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the vote(pay,byte[],uint8[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(pay,byte[],uint8[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundMinBalReq, params.args.signature, params.args.answerIds],
    }
  }
}

/**
 * A client to make calls to the VotingRound smart contract
 */
export class VotingRoundClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VotingRoundClient`
   *
   * @param appClient An `AppClient` instance which has been created with the VotingRound app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VotingRoundClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VotingRoundNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `VotingRoundClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VotingRoundClient> {
    return new VotingRoundClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VotingRoundClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VotingRoundClient> {
    return new VotingRoundClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the VotingRound smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPreconditions: (params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.getPreconditions(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    close: (params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.close(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.vote(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the VotingRound smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPreconditions: (params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.getPreconditions(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    close: (params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.close(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.vote(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the VotingRound smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPreconditions: async (params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.getPreconditions(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the VotingRound smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['bootstrap(pay)void'])}
    },

    /**
     * Makes a call to the VotingRound smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    close: async (params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.close(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['close()void'])}
    },

    /**
     * Makes a call to the VotingRound smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['vote(pay,byte[],uint8[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VotingRoundClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPreconditions(params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(VotingRoundParamsFactory.getPreconditions(params))
    return result.return as unknown as VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current VotingRound app
   */
  state = {
    /**
     * Methods to access global state for the current VotingRound app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          closeTime: result.close_time,
          endTime: result.end_time,
          isBootstrapped: result.is_bootstrapped,
          metadataIpfsCid: new BinaryStateValue(result.metadata_ipfs_cid),
          nftAssetId: result.nft_asset_id,
          nftImageUrl: new BinaryStateValue(result.nft_image_url),
          optionCounts: new BinaryStateValue(result.option_counts),
          quorum: result.quorum,
          snapshotPublicKey: new BinaryStateValue(result.snapshot_public_key),
          startTime: result.start_time,
          totalOptions: result.total_options,
          voteId: new BinaryStateValue(result.vote_id),
          voterCount: result.voter_count,
        }
      },
      /**
       * Get the current value of the close_time key in global state
       */
      closeTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("close_time")) as bigint | undefined },
      /**
       * Get the current value of the end_time key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("end_time")) as bigint | undefined },
      /**
       * Get the current value of the is_bootstrapped key in global state
       */
      isBootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the metadata_ipfs_cid key in global state
       */
      metadataIpfsCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("metadata_ipfs_cid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the nft_asset_id key in global state
       */
      nftAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nft_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the nft_image_url key in global state
       */
      nftImageUrl: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("nft_image_url")) as Uint8Array | undefined) },
      /**
       * Get the current value of the option_counts key in global state
       */
      optionCounts: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("option_counts")) as Uint8Array | undefined) },
      /**
       * Get the current value of the quorum key in global state
       */
      quorum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum")) as bigint | undefined },
      /**
       * Get the current value of the snapshot_public_key key in global state
       */
      snapshotPublicKey: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("snapshot_public_key")) as Uint8Array | undefined) },
      /**
       * Get the current value of the start_time key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("start_time")) as bigint | undefined },
      /**
       * Get the current value of the total_options key in global state
       */
      totalOptions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_options")) as bigint | undefined },
      /**
       * Get the current value of the vote_id key in global state
       */
      voteId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("vote_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the voter_count key in global state
       */
      voterCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voter_count")) as bigint | undefined },
    },
  }

  public newGroup(): VotingRoundComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_preconditions(byte[])(uint64,uint64,uint64,uint64) method call against the VotingRound contract
       */
      getPreconditions(params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPreconditions(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_preconditions(byte[])(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a bootstrap(pay)void method call against the VotingRound contract
       */
      bootstrap(params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a close()void method call against the VotingRound contract
       */
      close(params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.close(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote(pay,byte[],uint8[])void method call against the VotingRound contract
       */
      vote(params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the VotingRound contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VotingRoundComposer
  }
}
export type VotingRoundComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPreconditions(params?: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the bootstrap(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['bootstrap(pay)void'] | undefined]>

  /**
   * Calls the close()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  close(params?: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['close()void'] | undefined]>

  /**
   * Calls the vote(pay,byte[],uint8[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['vote(pay,byte[],uint8[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the VotingRound smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VotingRoundComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VotingRoundComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VotingRoundComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VotingRoundComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VotingRoundComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VotingRoundComposerResults<TReturns>>
}
export type VotingRoundComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

