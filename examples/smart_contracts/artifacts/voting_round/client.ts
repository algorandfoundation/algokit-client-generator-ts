/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"VotingRound","structs":{"VotingPreconditions":[{"name":"isVotingOpen","type":"uint64"},{"name":"isAllowedToVote","type":"uint64"},{"name":"hasAlreadyVoted","type":"uint64"},{"name":"currentTime","type":"uint64"}]},"methods":[{"name":"get_preconditions","args":[{"name":"signature","type":"byte[]"}],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"VotingPreconditions"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"create","args":[{"name":"vote_id","type":"string"},{"name":"snapshot_public_key","type":"byte[]"},{"name":"metadata_ipfs_cid","type":"string"},{"name":"start_time","type":"uint64"},{"name":"end_time","type":"uint64"},{"name":"option_counts","type":"uint8[]"},{"name":"quorum","type":"uint64"},{"name":"nft_image_url","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","args":[{"name":"fund_min_bal_req","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"close","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"vote","args":[{"name":"fund_min_bal_req","type":"pay"},{"name":"signature","type":"byte[]"},{"name":"answer_ids","type":"uint8[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":8,"bytes":5},"local":{"ints":0,"bytes":0}},"keys":{"global":{"close_time":{"key":"Y2xvc2VfdGltZQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the time the vote was closed"},"end_time":{"key":"ZW5kX3RpbWU=","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the ending time of voting_round"},"is_bootstrapped":{"key":"aXNfYm9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64","desc":"Whether or not the contract has been bootstrapped with answers"},"metadata_ipfs_cid":{"key":"bWV0YWRhdGFfaXBmc19jaWQ=","keyType":"AVMString","valueType":"AVMBytes","desc":"The IPFS content ID of the voting_round metadata file"},"nft_asset_id":{"key":"bmZ0X2Fzc2V0X2lk","keyType":"AVMString","valueType":"AVMUint64","desc":"The asset ID of a result NFT if one has been created"},"nft_image_url":{"key":"bmZ0X2ltYWdlX3VybA==","keyType":"AVMString","valueType":"AVMBytes","desc":"The IPFS URL of the default image to use as the media of the result NFT"},"option_counts":{"key":"b3B0aW9uX2NvdW50cw==","keyType":"AVMString","valueType":"AVMBytes","desc":"The number of options for each question"},"quorum":{"key":"cXVvcnVt","keyType":"AVMString","valueType":"AVMUint64","desc":"The minimum number of voters to reach quorum"},"snapshot_public_key":{"key":"c25hcHNob3RfcHVibGljX2tleQ==","keyType":"AVMString","valueType":"AVMBytes","desc":"The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot"},"start_time":{"key":"c3RhcnRfdGltZQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the starting time of voting_round"},"total_options":{"key":"dG90YWxfb3B0aW9ucw==","keyType":"AVMString","valueType":"AVMUint64","desc":"The total number of options"},"vote_id":{"key":"dm90ZV9pZA==","keyType":"AVMString","valueType":"AVMBytes","desc":"The identifier of this voting_round round"},"voter_count":{"key":"dm90ZXJfY291bnQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"The minimum number of voters who have voted"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBleGFtcGxlcy5zbWFydF9jb250cmFjdHMudm90aW5nX3JvdW5kLmNvbnRyYWN0LlZvdGluZ1JvdW5kLl9fYWxnb3B5X2VudHJ5cG9pbnRfd2l0aF9pbml0KCkgLT4gdWludDY0OgptYWluOgogICAgaW50Y2Jsb2NrIDAgMSA4IDEwIDQwMCBUTVBMX0RFTEVUQUJMRQogICAgYnl0ZWNibG9jayAib3B0aW9uX2NvdW50cyIgIiIgMHg1NiAiaXNfYm9vdHN0cmFwcGVkIiAiY2xvc2VfdGltZSIgInZvdGVfaWQiICJ2b3Rlcl9jb3VudCIgInRvdGFsX29wdGlvbnMiIDB4MDY4MTAxICJzbmFwc2hvdF9wdWJsaWNfa2V5IiAic3RhcnRfdGltZSIgImVuZF90aW1lIiAibWV0YWRhdGFfaXBmc19jaWQiICJxdW9ydW0iICJuZnRfaW1hZ2VfdXJsIiAibmZ0X2Fzc2V0X2lkIgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTozNAogICAgLy8gY2xhc3MgVm90aW5nUm91bmQoUGVybWFuZW5jZUNvbnRyb2xBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDEwCiAgICBwdXNoYnl0ZXNzIDB4YmNiMTU4OTYgMHhhZTg5N2Y2YiAweGE0ZThkMTY0IDB4OTY1NjA0N2EgMHg4NGE1M2M2ZSAvLyBtZXRob2QgImdldF9wcmVjb25kaXRpb25zKGJ5dGVbXSkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSIsIG1ldGhvZCAiY3JlYXRlKHN0cmluZyxieXRlW10sc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDhbXSx1aW50NjQsc3RyaW5nKXZvaWQiLCBtZXRob2QgImJvb3RzdHJhcChwYXkpdm9pZCIsIG1ldGhvZCAiY2xvc2UoKXZvaWQiLCBtZXRob2QgInZvdGUocGF5LGJ5dGVbXSx1aW50OFtdKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2dldF9wcmVjb25kaXRpb25zX3JvdXRlQDUgbWFpbl9jcmVhdGVfcm91dGVANiBtYWluX2Jvb3RzdHJhcF9yb3V0ZUA3IG1haW5fY2xvc2Vfcm91dGVAOCBtYWluX3ZvdGVfcm91dGVAOQoKbWFpbl9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTozNAogICAgLy8gY2xhc3MgVm90aW5nUm91bmQoUGVybWFuZW5jZUNvbnRyb2xBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl92b3RlX3JvdXRlQDk6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MzQKICAgIC8vIGNsYXNzIFZvdGluZ1JvdW5kKFBlcm1hbmVuY2VDb250cm9sQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiB2b3RlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Nsb3NlX3JvdXRlQDg6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY2xvc2UKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYm9vdHN0cmFwX3JvdXRlQDc6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE2NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MzQKICAgIC8vIGNsYXNzIFZvdGluZ1JvdW5kKFBlcm1hbmVuY2VDb250cm9sQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBib290c3RyYXAKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX3JvdXRlQDY6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjEzMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTozNAogICAgLy8gY2xhc3MgVm90aW5nUm91bmQoUGVybWFuZW5jZUNvbnRyb2xBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxMzMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgY2FsbHN1YiBjcmVhdGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3ByZWNvbmRpdGlvbnNfcm91dGVANToKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6ODcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjM0CiAgICAvLyBjbGFzcyBWb3RpbmdSb3VuZChQZXJtYW5lbmNlQ29udHJvbEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X3ByZWNvbmRpdGlvbnMKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTA6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjM0CiAgICAvLyBjbGFzcyBWb3RpbmdSb3VuZChQZXJtYW5lbmNlQ29udHJvbEFSQzRDb250cmFjdCk6CiAgICBwdXNoaW50IDUgLy8gNQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgbWF0Y2ggbWFpbl9kZWxldGVAMTEKICAgIGIgbWFpbl9hZnRlcl9pZl9lbHNlQDEyCgptYWluX2RlbGV0ZUAxMToKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy9iYXNlL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlbGV0ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIF9wdXlhX2xpYi51dGlsLmVuc3VyZV9idWRnZXQocmVxdWlyZWRfYnVkZ2V0OiB1aW50NjQsIGZlZV9zb3VyY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgIHByb3RvIDIgMAogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzMgLy8gMTAKICAgICsKCmVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDE6CiAgICBmcmFtZV9kaWcgMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3CiAgICBpdHhuX2JlZ2luCiAgICBwdXNoaW50IDYgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgYnl0ZWMgOCAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGVjIDggLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KICAgIGZyYW1lX2RpZyAtMQogICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANjoKICAgIGl0eG5fc3VibWl0CiAgICBiIGVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDEKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0OgogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzOgogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDc6CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5zbWFydF9jb250cmFjdHMudm90aW5nX3JvdW5kLmNvbnRyYWN0LlZvdGluZ1JvdW5kLmFsbG93ZWRfdG9fdm90ZShzaWduYXR1cmU6IGJ5dGVzKSAtPiB1aW50NjQ6CmFsbG93ZWRfdG9fdm90ZToKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6NzAtNzEKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYWxsb3dlZF90b192b3RlKHNlbGYsIHNpZ25hdHVyZTogQnl0ZXMpIC0+IGJvb2w6CiAgICBwcm90byAxIDEKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6NzIKICAgIC8vIGVuc3VyZV9idWRnZXQoVUludDY0KDIwMDApKQogICAgcHVzaGludCAyMDAwIC8vIDIwMDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6NzMKICAgIC8vIHJldHVybiBvcC5lZDI1NTE5dmVyaWZ5X2JhcmUoVHhuLnNlbmRlci5ieXRlcywgc2lnbmF0dXJlLCBzZWxmLnNuYXBzaG90X3B1YmxpY19rZXkudmFsdWUpCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOSAvLyAic25hcHNob3RfcHVibGljX2tleSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zbmFwc2hvdF9wdWJsaWNfa2V5IGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICBzd2FwCiAgICBlZDI1NTE5dmVyaWZ5X2JhcmUKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLnNtYXJ0X2NvbnRyYWN0cy52b3Rpbmdfcm91bmQuY29udHJhY3QuVm90aW5nUm91bmQudm90aW5nX29wZW4oKSAtPiB1aW50NjQ6CnZvdGluZ19vcGVuOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo3NS03NgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiB2b3Rpbmdfb3BlbihzZWxmKSAtPiBib29sOgogICAgcHJvdG8gMCAxCiAgICBieXRlY18xIC8vICIiCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5Ojc4CiAgICAvLyBzZWxmLmlzX2Jvb3RzdHJhcHBlZC52YWx1ZSA9PSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJpc19ib290c3RyYXBwZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfYm9vdHN0cmFwcGVkIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgID09CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5Ojc4LTgwCiAgICAvLyBzZWxmLmlzX2Jvb3RzdHJhcHBlZC52YWx1ZSA9PSBVSW50NjQoMSkKICAgIC8vIGFuZCBzZWxmLmNsb3NlX3RpbWUudmFsdWUgPT0gMAogICAgLy8gYW5kIHNlbGYuc3RhcnRfdGltZS52YWx1ZSA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA8IHNlbGYuZW5kX3RpbWUudmFsdWUKICAgIGJ6IHZvdGluZ19vcGVuX2Jvb2xfZmFsc2VANQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo3OQogICAgLy8gYW5kIHNlbGYuY2xvc2VfdGltZS52YWx1ZSA9PSAwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiY2xvc2VfdGltZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jbG9zZV90aW1lIGV4aXN0cwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo3OC04MAogICAgLy8gc2VsZi5pc19ib290c3RyYXBwZWQudmFsdWUgPT0gVUludDY0KDEpCiAgICAvLyBhbmQgc2VsZi5jbG9zZV90aW1lLnZhbHVlID09IDAKICAgIC8vIGFuZCBzZWxmLnN0YXJ0X3RpbWUudmFsdWUgPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPCBzZWxmLmVuZF90aW1lLnZhbHVlCiAgICBibnogdm90aW5nX29wZW5fYm9vbF9mYWxzZUA1CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjgwCiAgICAvLyBhbmQgc2VsZi5zdGFydF90aW1lLnZhbHVlIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wIDwgc2VsZi5lbmRfdGltZS52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJzdGFydF90aW1lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXJ0X3RpbWUgZXhpc3RzCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgPD0KICAgIGJ6IHZvdGluZ19vcGVuX2Jvb2xfZmFsc2VANQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDExIC8vICJlbmRfdGltZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lbmRfdGltZSBleGlzdHMKICAgIGZyYW1lX2RpZyAwCiAgICA+CiAgICBieiB2b3Rpbmdfb3Blbl9ib29sX2ZhbHNlQDUKICAgIGludGNfMSAvLyAxCgp2b3Rpbmdfb3Blbl9ib29sX21lcmdlQDY6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5Ojc3LTgxCiAgICAvLyByZXR1cm4gKAogICAgLy8gICAgIHNlbGYuaXNfYm9vdHN0cmFwcGVkLnZhbHVlID09IFVJbnQ2NCgxKQogICAgLy8gICAgIGFuZCBzZWxmLmNsb3NlX3RpbWUudmFsdWUgPT0gMAogICAgLy8gICAgIGFuZCBzZWxmLnN0YXJ0X3RpbWUudmFsdWUgPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPCBzZWxmLmVuZF90aW1lLnZhbHVlCiAgICAvLyApCiAgICBzd2FwCiAgICByZXRzdWIKCnZvdGluZ19vcGVuX2Jvb2xfZmFsc2VANToKICAgIGludGNfMCAvLyAwCiAgICBiIHZvdGluZ19vcGVuX2Jvb2xfbWVyZ2VANgoKCi8vIGV4YW1wbGVzLnNtYXJ0X2NvbnRyYWN0cy52b3Rpbmdfcm91bmQuY29udHJhY3QuVm90aW5nUm91bmQuZ2V0X3ByZWNvbmRpdGlvbnMoc2lnbmF0dXJlOiBieXRlcykgLT4gYnl0ZXM6CmdldF9wcmVjb25kaXRpb25zOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo4Ny04OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3ByZWNvbmRpdGlvbnMoc2VsZiwgc2lnbmF0dXJlOiBhcmM0LkR5bmFtaWNCeXRlcykgLT4gVm90aW5nUHJlY29uZGl0aW9uczoKICAgIHByb3RvIDEgMQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo5MAogICAgLy8gYXJjNC5VSW50NjQoc2VsZi52b3Rpbmdfb3BlbigpKSwKICAgIGNhbGxzdWIgdm90aW5nX29wZW4KICAgIGl0b2IKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6OTEKICAgIC8vIGFyYzQuVUludDY0KHNlbGYuYWxsb3dlZF90b192b3RlKHNpZ25hdHVyZS5uYXRpdmUpKSwKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGNhbGxzdWIgYWxsb3dlZF90b192b3RlCiAgICBpdG9iCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyByZXR1cm4gc2VsZi52b3Rlcy5tYXliZShhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikpWzFdCiAgICB0eG4gU2VuZGVyCiAgICBib3hfZ2V0CiAgICBidXJ5IDEKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6OTIKICAgIC8vIGFyYzQuVUludDY0KHNlbGYuYWxyZWFkeV92b3RlZCgpKSwKICAgIGl0b2IKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6OTMKICAgIC8vIGFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6ODktOTQKICAgIC8vIHJldHVybiBWb3RpbmdQcmVjb25kaXRpb25zKAogICAgLy8gICAgIGFyYzQuVUludDY0KHNlbGYudm90aW5nX29wZW4oKSksCiAgICAvLyAgICAgYXJjNC5VSW50NjQoc2VsZi5hbGxvd2VkX3RvX3ZvdGUoc2lnbmF0dXJlLm5hdGl2ZSkpLAogICAgLy8gICAgIGFyYzQuVUludDY0KHNlbGYuYWxyZWFkeV92b3RlZCgpKSwKICAgIC8vICAgICBhcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCksCiAgICAvLyApCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5zbWFydF9jb250cmFjdHMudm90aW5nX3JvdW5kLmNvbnRyYWN0LlZvdGluZ1JvdW5kLmNyZWF0ZSh2b3RlX2lkOiBieXRlcywgc25hcHNob3RfcHVibGljX2tleTogYnl0ZXMsIG1ldGFkYXRhX2lwZnNfY2lkOiBieXRlcywgc3RhcnRfdGltZTogYnl0ZXMsIGVuZF90aW1lOiBieXRlcywgb3B0aW9uX2NvdW50czogYnl0ZXMsIHF1b3J1bTogYnl0ZXMsIG5mdF9pbWFnZV91cmw6IGJ5dGVzKSAtPiB2b2lkOgpjcmVhdGU6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjEzMy0xNDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGNyZWF0ZSggICMgbm9xYTogUExSMDkxMwogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdm90ZV9pZDogYXJjNC5TdHJpbmcsCiAgICAvLyAgICAgc25hcHNob3RfcHVibGljX2tleTogYXJjNC5EeW5hbWljQnl0ZXMsCiAgICAvLyAgICAgbWV0YWRhdGFfaXBmc19jaWQ6IGFyYzQuU3RyaW5nLAogICAgLy8gICAgIHN0YXJ0X3RpbWU6IGFyYzQuVUludDY0LAogICAgLy8gICAgIGVuZF90aW1lOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBvcHRpb25fY291bnRzOiBWb3RlSW5kZXhBcnJheSwKICAgIC8vICAgICBxdW9ydW06IGFyYzQuVUludDY0LAogICAgLy8gICAgIG5mdF9pbWFnZV91cmw6IGFyYzQuU3RyaW5nLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gOCAwCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE0NS0xNDYKICAgIC8vICMgc3RvcmVfb3B0aW9uX2NvdW50cyB3aGVuIHRoZXJlIGlzIGEgbWF4ICMgb2Ygb3B0aW9ucyBuZWVkcyB+MjYwMCBidWRnZXQKICAgIC8vIGVuc3VyZV9idWRnZXQoVUludDY0KDI4MDApKQogICAgcHVzaGludCAyODAwIC8vIDI4MDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTQ4CiAgICAvLyBhc3NlcnQgc3RhcnRfdGltZS5uYXRpdmUgPD0gZW5kX3RpbWUubmF0aXZlLCAiRW5kIHRpbWUgc2hvdWxkIGJlIGFmdGVyIHN0YXJ0IHRpbWUiCiAgICBmcmFtZV9kaWcgLTUKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtNAogICAgYnRvaQogICAgZHVwMgogICAgPD0KICAgIGFzc2VydCAvLyBFbmQgdGltZSBzaG91bGQgYmUgYWZ0ZXIgc3RhcnQgdGltZQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNDkKICAgIC8vIGFzc2VydCBlbmRfdGltZS5uYXRpdmUgPj0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAsICJFbmQgdGltZSBzaG91bGQgYmUgaW4gdGhlIGZ1dHVyZSIKICAgIGR1cAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgPj0KICAgIGFzc2VydCAvLyBFbmQgdGltZSBzaG91bGQgYmUgaW4gdGhlIGZ1dHVyZQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNTEKICAgIC8vIHNlbGYudm90ZV9pZC52YWx1ZSA9IHZvdGVfaWQKICAgIGJ5dGVjIDUgLy8gInZvdGVfaWQiCiAgICBmcmFtZV9kaWcgLTgKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE1MgogICAgLy8gc2VsZi5zbmFwc2hvdF9wdWJsaWNfa2V5LnZhbHVlID0gc25hcHNob3RfcHVibGljX2tleS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtNwogICAgZXh0cmFjdCAyIDAKICAgIGJ5dGVjIDkgLy8gInNuYXBzaG90X3B1YmxpY19rZXkiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNTMKICAgIC8vIHNlbGYubWV0YWRhdGFfaXBmc19jaWQudmFsdWUgPSBtZXRhZGF0YV9pcGZzX2NpZC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtNgogICAgZXh0cmFjdCAyIDAKICAgIGJ5dGVjIDEyIC8vICJtZXRhZGF0YV9pcGZzX2NpZCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE1NAogICAgLy8gc2VsZi5zdGFydF90aW1lLnZhbHVlID0gc3RhcnRfdGltZS5uYXRpdmUKICAgIGJ5dGVjIDEwIC8vICJzdGFydF90aW1lIgogICAgdW5jb3ZlciAyCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNTUKICAgIC8vIHNlbGYuZW5kX3RpbWUudmFsdWUgPSBlbmRfdGltZS5uYXRpdmUKICAgIGJ5dGVjIDExIC8vICJlbmRfdGltZSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE1NgogICAgLy8gc2VsZi5xdW9ydW0udmFsdWUgPSBxdW9ydW0ubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGJ5dGVjIDEzIC8vICJxdW9ydW0iCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNTcKICAgIC8vIHNlbGYuaXNfYm9vdHN0cmFwcGVkLnZhbHVlID0gVUludDY0KDApCiAgICBieXRlY18zIC8vICJpc19ib290c3RyYXBwZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTU4CiAgICAvLyBzZWxmLnZvdGVyX2NvdW50LnZhbHVlID0gVUludDY0KDApCiAgICBieXRlYyA2IC8vICJ2b3Rlcl9jb3VudCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNTkKICAgIC8vIHNlbGYuY2xvc2VfdGltZS52YWx1ZSA9IFVJbnQ2NCgwKQogICAgYnl0ZWMgNCAvLyAiY2xvc2VfdGltZSIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNjAKICAgIC8vIHNlbGYubmZ0X2ltYWdlX3VybC52YWx1ZSA9IG5mdF9pbWFnZV91cmwubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMiAwCiAgICBieXRlYyAxNCAvLyAibmZ0X2ltYWdlX3VybCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE2MQogICAgLy8gc2VsZi5uZnRfYXNzZXRfaWQudmFsdWUgPSBVSW50NjQoMCkKICAgIGJ5dGVjIDE1IC8vICJuZnRfYXNzZXRfaWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6NTQKICAgIC8vIGFzc2VydCBkYXRhLCAib3B0aW9uX2NvdW50cyBzaG91bGQgYmUgbm9uLWVtcHR5IgogICAgZnJhbWVfZGlnIC0zCiAgICBwdXNoYnl0ZXMgMHgwMDAwCiAgICAhPQogICAgYXNzZXJ0IC8vIG9wdGlvbl9jb3VudHMgc2hvdWxkIGJlIG5vbi1lbXB0eQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo1NQogICAgLy8gYXNzZXJ0IGRhdGEubGVuZ3RoIDw9IDExMiwgIkNhbid0IGhhdmUgbW9yZSB0aGFuIDExMiBxdWVzdGlvbnMiCiAgICBmcmFtZV9kaWcgLTMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAxMTIgLy8gMTEyCiAgICA8PQogICAgYXNzZXJ0IC8vIENhbid0IGhhdmUgbW9yZSB0aGFuIDExMiBxdWVzdGlvbnMKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6NTYKICAgIC8vIHNlbGYub3B0aW9uX2NvdW50cy52YWx1ZSA9IGRhdGEuY29weSgpCiAgICBieXRlY18wIC8vICJvcHRpb25fY291bnRzIgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo2NAogICAgLy8gdG90YWxfY291bnQgPSBVSW50NjQoMCkKICAgIGludGNfMCAvLyAwCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBmb3IgY291bnQgaW4gc2VsZi5vcHRpb25fY291bnRzLnZhbHVlOgogICAgZHVwCiAgICBieXRlY18wIC8vICJvcHRpb25fY291bnRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vcHRpb25fY291bnRzIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMAoKY3JlYXRlX2Zvcl9oZWFkZXJAMjoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6NjUKICAgIC8vIGZvciBjb3VudCBpbiBzZWxmLm9wdGlvbl9jb3VudHMudmFsdWU6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDIKICAgIDwKICAgIGJ6IGNyZWF0ZV9hZnRlcl9mb3JANAogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzEgLy8gMQogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjY2CiAgICAvLyB0b3RhbF9jb3VudCArPSBjb3VudC5uYXRpdmUKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGIgY3JlYXRlX2Zvcl9oZWFkZXJAMgoKY3JlYXRlX2FmdGVyX2ZvckA0OgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weTo1OQogICAgLy8gYXNzZXJ0IHRvdGFsX29wdGlvbnMgPD0gMTI4LCAiQ2FuJ3QgaGF2ZSBtb3JlIHRoYW4gMTI4IHZvdGUgb3B0aW9ucyIKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIHB1c2hpbnQgMTI4IC8vIDEyOAogICAgPD0KICAgIGFzc2VydCAvLyBDYW4ndCBoYXZlIG1vcmUgdGhhbiAxMjggdm90ZSBvcHRpb25zCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjYwCiAgICAvLyBzZWxmLnRvdGFsX29wdGlvbnMudmFsdWUgPSB0b3RhbF9vcHRpb25zCiAgICBieXRlYyA3IC8vICJ0b3RhbF9vcHRpb25zIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLnNtYXJ0X2NvbnRyYWN0cy52b3Rpbmdfcm91bmQuY29udHJhY3QuVm90aW5nUm91bmQuYm9vdHN0cmFwKGZ1bmRfbWluX2JhbF9yZXE6IHVpbnQ2NCkgLT4gdm9pZDoKYm9vdHN0cmFwOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNjQtMTY1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBib290c3RyYXAoc2VsZiwgZnVuZF9taW5fYmFsX3JlcTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTY2CiAgICAvLyBzZWxmLmF1dGhvcml6ZV9jcmVhdG9yKCkKICAgIGNhbGxzdWIgYXV0aG9yaXplX2NyZWF0b3IKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTY3CiAgICAvLyBhc3NlcnQgbm90IHNlbGYuaXNfYm9vdHN0cmFwcGVkLnZhbHVlLCAiQWxyZWFkeSBib290c3RyYXBwZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiaXNfYm9vdHN0cmFwcGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzX2Jvb3RzdHJhcHBlZCBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBBbHJlYWR5IGJvb3RzdHJhcHBlZAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNjkKICAgIC8vIHNlbGYuaXNfYm9vdHN0cmFwcGVkLnZhbHVlID0gVUludDY0KDEpCiAgICBieXRlY18zIC8vICJpc19ib290c3RyYXBwZWQiCiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTcxLTE3MgogICAgLy8gIyBtaW5pbXVtIGJhbGFuY2UgcmVxIGZvcjogQUxHT3MgKyBWb3RlIHJlc3VsdCBORlQgYXNzZXQKICAgIC8vIEdsb2JhbC5taW5fYmFsYW5jZQogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTczCiAgICAvLyArIEdsb2JhbC5hc3NldF9vcHRfaW5fbWluX2JhbGFuY2UKICAgIGdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxNzEtMTczCiAgICAvLyAjIG1pbmltdW0gYmFsYW5jZSByZXEgZm9yOiBBTEdPcyArIFZvdGUgcmVzdWx0IE5GVCBhc3NldAogICAgLy8gR2xvYmFsLm1pbl9iYWxhbmNlCiAgICAvLyArIEdsb2JhbC5hc3NldF9vcHRfaW5fbWluX2JhbGFuY2UKICAgICsKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTc1LTE3NgogICAgLy8gIyBDcmVhdGUgTkZUIGZlZQogICAgLy8gVUludDY0KDFfMDAwKQogICAgcHVzaGludCAxMDAwIC8vIDEwMDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTcxLTE3NgogICAgLy8gIyBtaW5pbXVtIGJhbGFuY2UgcmVxIGZvcjogQUxHT3MgKyBWb3RlIHJlc3VsdCBORlQgYXNzZXQKICAgIC8vIEdsb2JhbC5taW5fYmFsYW5jZQogICAgLy8gKyBHbG9iYWwuYXNzZXRfb3B0X2luX21pbl9iYWxhbmNlCiAgICAvLyArCiAgICAvLyAjIENyZWF0ZSBORlQgZmVlCiAgICAvLyBVSW50NjQoMV8wMDApCiAgICArCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE3OC0xNzkKICAgIC8vICMgVGFsbHlCb3ggRmxhdCArIEtleQogICAgLy8gVUludDY0KDJfNTAwKQogICAgcHVzaGludCAyNTAwIC8vIDI1MDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTcxLTE3OQogICAgLy8gIyBtaW5pbXVtIGJhbGFuY2UgcmVxIGZvcjogQUxHT3MgKyBWb3RlIHJlc3VsdCBORlQgYXNzZXQKICAgIC8vIEdsb2JhbC5taW5fYmFsYW5jZQogICAgLy8gKyBHbG9iYWwuYXNzZXRfb3B0X2luX21pbl9iYWxhbmNlCiAgICAvLyArCiAgICAvLyAjIENyZWF0ZSBORlQgZmVlCiAgICAvLyBVSW50NjQoMV8wMDApCiAgICAvLyArCiAgICAvLyAjIFRhbGx5Qm94IEZsYXQgKyBLZXkKICAgIC8vIFVJbnQ2NCgyXzUwMCkKICAgICsKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTgwCiAgICAvLyArIFVJbnQ2NCg0MDApCiAgICBpbnRjIDQgLy8gNDAwCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE3MS0xODAKICAgIC8vICMgbWluaW11bSBiYWxhbmNlIHJlcSBmb3I6IEFMR09zICsgVm90ZSByZXN1bHQgTkZUIGFzc2V0CiAgICAvLyBHbG9iYWwubWluX2JhbGFuY2UKICAgIC8vICsgR2xvYmFsLmFzc2V0X29wdF9pbl9taW5fYmFsYW5jZQogICAgLy8gKwogICAgLy8gIyBDcmVhdGUgTkZUIGZlZQogICAgLy8gVUludDY0KDFfMDAwKQogICAgLy8gKwogICAgLy8gIyBUYWxseUJveCBGbGF0ICsgS2V5CiAgICAvLyBVSW50NjQoMl81MDApCiAgICAvLyArIFVJbnQ2NCg0MDApCiAgICArCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE4Mi0xODMKICAgIC8vICMgVGFsbHlCb3ggVmFsdWUKICAgIC8vIHNlbGYudG90YWxfb3B0aW9ucy52YWx1ZSAqIFVJbnQ2NCg4KSAqIFVJbnQ2NCg0MDApCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAidG90YWxfb3B0aW9ucyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9vcHRpb25zIGV4aXN0cwogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGludGMgNCAvLyA0MDAKICAgICoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTcxLTE4MwogICAgLy8gIyBtaW5pbXVtIGJhbGFuY2UgcmVxIGZvcjogQUxHT3MgKyBWb3RlIHJlc3VsdCBORlQgYXNzZXQKICAgIC8vIEdsb2JhbC5taW5fYmFsYW5jZQogICAgLy8gKyBHbG9iYWwuYXNzZXRfb3B0X2luX21pbl9iYWxhbmNlCiAgICAvLyArCiAgICAvLyAjIENyZWF0ZSBORlQgZmVlCiAgICAvLyBVSW50NjQoMV8wMDApCiAgICAvLyArCiAgICAvLyAjIFRhbGx5Qm94IEZsYXQgKyBLZXkKICAgIC8vIFVJbnQ2NCgyXzUwMCkKICAgIC8vICsgVUludDY0KDQwMCkKICAgIC8vICsKICAgIC8vICMgVGFsbHlCb3ggVmFsdWUKICAgIC8vIHNlbGYudG90YWxfb3B0aW9ucy52YWx1ZSAqIFVJbnQ2NCg4KSAqIFVJbnQ2NCg0MDApCiAgICArCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE4NgogICAgLy8gYXNzZXJ0IGZ1bmRfbWluX2JhbF9yZXEucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywgIlBheW1lbnQgbXVzdCBiZSB0byBhcHAgYWRkcmVzcyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgbXVzdCBiZSB0byBhcHAgYWRkcmVzcwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxODcKICAgIC8vIGxvZyhtaW5fYmFsX3JlcSkKICAgIGR1cAogICAgaXRvYgogICAgbG9nCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE4OAogICAgLy8gYXNzZXJ0IGZ1bmRfbWluX2JhbF9yZXEuYW1vdW50ID09IG1pbl9iYWxfcmVxLCAiUGF5bWVudCBtdXN0IGJlIGZvciB0aGUgZXhhY3QgbWluIGJhbGFuY2UgcmVxdWlyZW1lbnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgPT0KICAgIGFzc2VydCAvLyBQYXltZW50IG11c3QgYmUgZm9yIHRoZSBleGFjdCBtaW4gYmFsYW5jZSByZXF1aXJlbWVudAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToxOTAKICAgIC8vIHNlbGYudGFsbGllcy52YWx1ZSA9IG9wLmJ6ZXJvKHNlbGYudG90YWxfb3B0aW9ucy52YWx1ZSAqIFVJbnQ2NCg4KSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJ0b3RhbF9vcHRpb25zIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX29wdGlvbnMgZXhpc3RzCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgYnplcm8KICAgIGJ5dGVjXzIgLy8gMHg1NgogICAgYm94X2RlbAogICAgcG9wCiAgICBieXRlY18yIC8vIDB4NTYKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLnNtYXJ0X2NvbnRyYWN0cy52b3Rpbmdfcm91bmQuY29udHJhY3QuVm90aW5nUm91bmQuY2xvc2UoKSAtPiB2b2lkOgpjbG9zZToKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTkyLTE5MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY2xvc2Uoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgYnl0ZWNfMSAvLyAiIgogICAgZHVwbiAyCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE5NAogICAgLy8gc2VsZi5hdXRob3JpemVfY3JlYXRvcigpCiAgICBjYWxsc3ViIGF1dGhvcml6ZV9jcmVhdG9yCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjE5NQogICAgLy8gZW5zdXJlX2J1ZGdldChVSW50NjQoMjBfMDAwKSkKICAgIHB1c2hpbnQgMjAwMDAgLy8gMjAwMDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTk3CiAgICAvLyBhc3NlcnQgc2VsZi5jbG9zZV90aW1lLnZhbHVlID09IDAsICJBbHJlYWR5IGNsb3NlZCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJjbG9zZV90aW1lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNsb3NlX3RpbWUgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gQWxyZWFkeSBjbG9zZWQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MTk4CiAgICAvLyBzZWxmLmNsb3NlX3RpbWUudmFsdWUgPSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgYnl0ZWMgNCAvLyAiY2xvc2VfdGltZSIKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIwMwogICAgLy8gKyBzZWxmLnZvdGVfaWQudmFsdWUubmF0aXZlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAidm90ZV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlX2lkIGV4aXN0cwogICAgZXh0cmFjdCAyIDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjAwLTIwMgogICAgLy8gU3RyaW5nKAogICAgLy8gICAgICd7InN0YW5kYXJkIjoiYXJjNjkiLCJkZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSB2b3Rpbmdfcm91bmQgcmVzdWx0IE5GVCBmb3Igdm90aW5nX3JvdW5kIHJvdW5kIHdpdGggSUQgJwogICAgLy8gKQogICAgcHVzaGJ5dGVzICJ7XCJzdGFuZGFyZFwiOlwiYXJjNjlcIixcImRlc2NyaXB0aW9uXCI6XCJUaGlzIGlzIGEgdm90aW5nX3JvdW5kIHJlc3VsdCBORlQgZm9yIHZvdGluZ19yb3VuZCByb3VuZCB3aXRoIElEICIKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjAwLTIwMwogICAgLy8gU3RyaW5nKAogICAgLy8gICAgICd7InN0YW5kYXJkIjoiYXJjNjkiLCJkZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSB2b3Rpbmdfcm91bmQgcmVzdWx0IE5GVCBmb3Igdm90aW5nX3JvdW5kIHJvdW5kIHdpdGggSUQgJwogICAgLy8gKQogICAgLy8gKyBzZWxmLnZvdGVfaWQudmFsdWUubmF0aXZlCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjA0CiAgICAvLyArIFN0cmluZygnLiIsInByb3BlcnRpZXMiOnsibWV0YWRhdGEiOiJpcGZzOi8vJykKICAgIHB1c2hieXRlcyAiLlwiLFwicHJvcGVydGllc1wiOntcIm1ldGFkYXRhXCI6XCJpcGZzOi8vIgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMDAtMjA0CiAgICAvLyBTdHJpbmcoCiAgICAvLyAgICAgJ3sic3RhbmRhcmQiOiJhcmM2OSIsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHZvdGluZ19yb3VuZCByZXN1bHQgTkZUIGZvciB2b3Rpbmdfcm91bmQgcm91bmQgd2l0aCBJRCAnCiAgICAvLyApCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCcuIiwicHJvcGVydGllcyI6eyJtZXRhZGF0YSI6ImlwZnM6Ly8nKQogICAgY29uY2F0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gKyBzZWxmLm1ldGFkYXRhX2lwZnNfY2lkLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTIgLy8gIm1ldGFkYXRhX2lwZnNfY2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1ldGFkYXRhX2lwZnNfY2lkIGV4aXN0cwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMDAtMjA1CiAgICAvLyBTdHJpbmcoCiAgICAvLyAgICAgJ3sic3RhbmRhcmQiOiJhcmM2OSIsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHZvdGluZ19yb3VuZCByZXN1bHQgTkZUIGZvciB2b3Rpbmdfcm91bmQgcm91bmQgd2l0aCBJRCAnCiAgICAvLyApCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCcuIiwicHJvcGVydGllcyI6eyJtZXRhZGF0YSI6ImlwZnM6Ly8nKQogICAgLy8gKyBzZWxmLm1ldGFkYXRhX2lwZnNfY2lkLnZhbHVlCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjA2CiAgICAvLyArIFN0cmluZygnIiwiaWQiOiInKQogICAgcHVzaGJ5dGVzICJcIixcImlkXCI6XCIiCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIwMC0yMDYKICAgIC8vIFN0cmluZygKICAgIC8vICAgICAneyJzdGFuZGFyZCI6ImFyYzY5IiwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIGEgdm90aW5nX3JvdW5kIHJlc3VsdCBORlQgZm9yIHZvdGluZ19yb3VuZCByb3VuZCB3aXRoIElEICcKICAgIC8vICkKICAgIC8vICsgc2VsZi52b3RlX2lkLnZhbHVlLm5hdGl2ZQogICAgLy8gKyBTdHJpbmcoJy4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovLycpCiAgICAvLyArIHNlbGYubWV0YWRhdGFfaXBmc19jaWQudmFsdWUKICAgIC8vICsgU3RyaW5nKCciLCJpZCI6IicpCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjA3CiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJ2b3RlX2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVfaWQgZXhpc3RzCiAgICBleHRyYWN0IDIgMAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMDAtMjA3CiAgICAvLyBTdHJpbmcoCiAgICAvLyAgICAgJ3sic3RhbmRhcmQiOiJhcmM2OSIsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHZvdGluZ19yb3VuZCByZXN1bHQgTkZUIGZvciB2b3Rpbmdfcm91bmQgcm91bmQgd2l0aCBJRCAnCiAgICAvLyApCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCcuIiwicHJvcGVydGllcyI6eyJtZXRhZGF0YSI6ImlwZnM6Ly8nKQogICAgLy8gKyBzZWxmLm1ldGFkYXRhX2lwZnNfY2lkLnZhbHVlCiAgICAvLyArIFN0cmluZygnIiwiaWQiOiInKQogICAgLy8gKyBzZWxmLnZvdGVfaWQudmFsdWUubmF0aXZlCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjA4CiAgICAvLyArIFN0cmluZygnIiwicXVvcnVtIjonKQogICAgcHVzaGJ5dGVzICJcIixcInF1b3J1bVwiOiIKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjAwLTIwOAogICAgLy8gU3RyaW5nKAogICAgLy8gICAgICd7InN0YW5kYXJkIjoiYXJjNjkiLCJkZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSB2b3Rpbmdfcm91bmQgcmVzdWx0IE5GVCBmb3Igdm90aW5nX3JvdW5kIHJvdW5kIHdpdGggSUQgJwogICAgLy8gKQogICAgLy8gKyBzZWxmLnZvdGVfaWQudmFsdWUubmF0aXZlCiAgICAvLyArIFN0cmluZygnLiIsInByb3BlcnRpZXMiOnsibWV0YWRhdGEiOiJpcGZzOi8vJykKICAgIC8vICsgc2VsZi5tZXRhZGF0YV9pcGZzX2NpZC52YWx1ZQogICAgLy8gKyBTdHJpbmcoJyIsImlkIjoiJykKICAgIC8vICsgc2VsZi52b3RlX2lkLnZhbHVlLm5hdGl2ZQogICAgLy8gKyBTdHJpbmcoJyIsInF1b3J1bSI6JykKICAgIGNvbmNhdAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMDkKICAgIC8vICsgc2VsZi5pdG9hKHNlbGYucXVvcnVtLnZhbHVlKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEzIC8vICJxdW9ydW0iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucXVvcnVtIGV4aXN0cwogICAgY2FsbHN1YiBpdG9hCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIwMC0yMDkKICAgIC8vIFN0cmluZygKICAgIC8vICAgICAneyJzdGFuZGFyZCI6ImFyYzY5IiwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIGEgdm90aW5nX3JvdW5kIHJlc3VsdCBORlQgZm9yIHZvdGluZ19yb3VuZCByb3VuZCB3aXRoIElEICcKICAgIC8vICkKICAgIC8vICsgc2VsZi52b3RlX2lkLnZhbHVlLm5hdGl2ZQogICAgLy8gKyBTdHJpbmcoJy4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovLycpCiAgICAvLyArIHNlbGYubWV0YWRhdGFfaXBmc19jaWQudmFsdWUKICAgIC8vICsgU3RyaW5nKCciLCJpZCI6IicpCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCciLCJxdW9ydW0iOicpCiAgICAvLyArIHNlbGYuaXRvYShzZWxmLnF1b3J1bS52YWx1ZSkKICAgIGNvbmNhdAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMTAKICAgIC8vICsgU3RyaW5nKCcsInZvdGVyQ291bnQiOicpCiAgICBwdXNoYnl0ZXMgIixcInZvdGVyQ291bnRcIjoiCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIwMC0yMTAKICAgIC8vIFN0cmluZygKICAgIC8vICAgICAneyJzdGFuZGFyZCI6ImFyYzY5IiwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIGEgdm90aW5nX3JvdW5kIHJlc3VsdCBORlQgZm9yIHZvdGluZ19yb3VuZCByb3VuZCB3aXRoIElEICcKICAgIC8vICkKICAgIC8vICsgc2VsZi52b3RlX2lkLnZhbHVlLm5hdGl2ZQogICAgLy8gKyBTdHJpbmcoJy4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovLycpCiAgICAvLyArIHNlbGYubWV0YWRhdGFfaXBmc19jaWQudmFsdWUKICAgIC8vICsgU3RyaW5nKCciLCJpZCI6IicpCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCciLCJxdW9ydW0iOicpCiAgICAvLyArIHNlbGYuaXRvYShzZWxmLnF1b3J1bS52YWx1ZSkKICAgIC8vICsgU3RyaW5nKCcsInZvdGVyQ291bnQiOicpCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjExCiAgICAvLyArIHNlbGYuaXRvYShzZWxmLnZvdGVyX2NvdW50LnZhbHVlKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gInZvdGVyX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVyX2NvdW50IGV4aXN0cwogICAgY2FsbHN1YiBpdG9hCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIwMC0yMTEKICAgIC8vIFN0cmluZygKICAgIC8vICAgICAneyJzdGFuZGFyZCI6ImFyYzY5IiwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIGEgdm90aW5nX3JvdW5kIHJlc3VsdCBORlQgZm9yIHZvdGluZ19yb3VuZCByb3VuZCB3aXRoIElEICcKICAgIC8vICkKICAgIC8vICsgc2VsZi52b3RlX2lkLnZhbHVlLm5hdGl2ZQogICAgLy8gKyBTdHJpbmcoJy4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovLycpCiAgICAvLyArIHNlbGYubWV0YWRhdGFfaXBmc19jaWQudmFsdWUKICAgIC8vICsgU3RyaW5nKCciLCJpZCI6IicpCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCciLCJxdW9ydW0iOicpCiAgICAvLyArIHNlbGYuaXRvYShzZWxmLnF1b3J1bS52YWx1ZSkKICAgIC8vICsgU3RyaW5nKCcsInZvdGVyQ291bnQiOicpCiAgICAvLyArIHNlbGYuaXRvYShzZWxmLnZvdGVyX2NvdW50LnZhbHVlKQogICAgY29uY2F0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIxMgogICAgLy8gKyBTdHJpbmcoJywidGFsbGllcyI6WycpCiAgICBwdXNoYnl0ZXMgIixcInRhbGxpZXNcIjpbIgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMDAtMjEyCiAgICAvLyBTdHJpbmcoCiAgICAvLyAgICAgJ3sic3RhbmRhcmQiOiJhcmM2OSIsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHZvdGluZ19yb3VuZCByZXN1bHQgTkZUIGZvciB2b3Rpbmdfcm91bmQgcm91bmQgd2l0aCBJRCAnCiAgICAvLyApCiAgICAvLyArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUKICAgIC8vICsgU3RyaW5nKCcuIiwicHJvcGVydGllcyI6eyJtZXRhZGF0YSI6ImlwZnM6Ly8nKQogICAgLy8gKyBzZWxmLm1ldGFkYXRhX2lwZnNfY2lkLnZhbHVlCiAgICAvLyArIFN0cmluZygnIiwiaWQiOiInKQogICAgLy8gKyBzZWxmLnZvdGVfaWQudmFsdWUubmF0aXZlCiAgICAvLyArIFN0cmluZygnIiwicXVvcnVtIjonKQogICAgLy8gKyBzZWxmLml0b2Eoc2VsZi5xdW9ydW0udmFsdWUpCiAgICAvLyArIFN0cmluZygnLCJ2b3RlckNvdW50IjonKQogICAgLy8gKyBzZWxmLml0b2Eoc2VsZi52b3Rlcl9jb3VudC52YWx1ZSkKICAgIC8vICsgU3RyaW5nKCcsInRhbGxpZXMiOlsnKQogICAgY29uY2F0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIxNAogICAgLy8gZm9yIGNvdW50IGluIHNlbGYub3B0aW9uX2NvdW50cy52YWx1ZToKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJvcHRpb25fY291bnRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vcHRpb25fY291bnRzIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMAoKY2xvc2VfZm9yX2hlYWRlckAxOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMTQKICAgIC8vIGZvciBjb3VudCBpbiBzZWxmLm9wdGlvbl9jb3VudHMudmFsdWU6CiAgICBmcmFtZV9kaWcgNgogICAgZnJhbWVfZGlnIDUKICAgIDwKICAgIGJ6IGNsb3NlX2FmdGVyX2ZvckAxNwogICAgZnJhbWVfZGlnIDQKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgNgogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMTUKICAgIC8vIGZvciBqIGluIHVyYW5nZShjb3VudC5uYXRpdmUpOgogICAgYnRvaQogICAgZnJhbWVfYnVyeSAxCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAwCgpjbG9zZV9mb3JfaGVhZGVyQDM6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIxNQogICAgLy8gZm9yIGogaW4gdXJhbmdlKGNvdW50Lm5hdGl2ZSk6CiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIDEKICAgIDwKICAgIGJ6IGNsb3NlX2FmdGVyX2ZvckAxNQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMTYKICAgIC8vIG5vdGUgKz0gU3RyaW5nKCJbIikgaWYgaiA9PSAwIGVsc2UgU3RyaW5nKCIiKQogICAgZnJhbWVfZGlnIDAKICAgIGJueiBjbG9zZV90ZXJuYXJ5X2ZhbHNlQDYKICAgIHB1c2hieXRlcyAiWyIKCmNsb3NlX3Rlcm5hcnlfbWVyZ2VANzoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE2CiAgICAvLyBub3RlICs9IFN0cmluZygiWyIpIGlmIGogPT0gMCBlbHNlIFN0cmluZygiIikKICAgIGZyYW1lX2RpZyAzCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE3CiAgICAvLyBub3RlICs9IHNlbGYuaXRvYShvcC5idG9pKHNlbGYudGFsbGllcy52YWx1ZVtqIDogaiArIDhdKSkKICAgIGJ5dGVjXzIgLy8gMHg1NgogICAgYm94X2xlbgogICAgcG9wCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBkaWcgMQogICAgPAogICAgZGlnIDEKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDIKICAgIGludGNfMiAvLyA4CiAgICArCiAgICBkdXAKICAgIGRpZyAzCiAgICA8CiAgICB1bmNvdmVyIDMKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDEKICAgIC0KICAgIGJ5dGVjXzIgLy8gMHg1NgogICAgY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGNhbGxzdWIgaXRvYQogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMjAKICAgIC8vIGlmIGogPT0gY291bnQubmF0aXZlIC0gVUludDY0KDEpCiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18xIC8vIDEKICAgIC0KICAgID09CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMTktMjIxCiAgICAvLyAoU3RyaW5nKCJdIikgKyAoU3RyaW5nKCIiKSBpZiBqID09IGNvdW50Lm5hdGl2ZSAtIFVJbnQ2NCgxKSBlbHNlIFN0cmluZygiLCIpKSkKICAgIC8vIGlmIGogPT0gY291bnQubmF0aXZlIC0gVUludDY0KDEpCiAgICAvLyBlbHNlIFN0cmluZygiLCIpCiAgICBieiBjbG9zZV90ZXJuYXJ5X2ZhbHNlQDEyCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIxOQogICAgLy8gKFN0cmluZygiXSIpICsgKFN0cmluZygiIikgaWYgaiA9PSBjb3VudC5uYXRpdmUgLSBVSW50NjQoMSkgZWxzZSBTdHJpbmcoIiwiKSkpCiAgICBmcmFtZV9kaWcgMgogICAgYnogY2xvc2VfdGVybmFyeV9mYWxzZUAxMAogICAgYnl0ZWNfMSAvLyAiIgoKY2xvc2VfdGVybmFyeV9tZXJnZUAxMToKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE5CiAgICAvLyAoU3RyaW5nKCJdIikgKyAoU3RyaW5nKCIiKSBpZiBqID09IGNvdW50Lm5hdGl2ZSAtIFVJbnQ2NCgxKSBlbHNlIFN0cmluZygiLCIpKSkKICAgIHB1c2hieXRlcyAiXSIKICAgIHN3YXAKICAgIGNvbmNhdAoKY2xvc2VfdGVybmFyeV9tZXJnZUAxMzoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE4LTIyMgogICAgLy8gbm90ZSArPSAoCiAgICAvLyAgICAgKFN0cmluZygiXSIpICsgKFN0cmluZygiIikgaWYgaiA9PSBjb3VudC5uYXRpdmUgLSBVSW50NjQoMSkgZWxzZSBTdHJpbmcoIiwiKSkpCiAgICAvLyAgICAgaWYgaiA9PSBjb3VudC5uYXRpdmUgLSBVSW50NjQoMSkKICAgIC8vICAgICBlbHNlIFN0cmluZygiLCIpCiAgICAvLyApCiAgICBmcmFtZV9kaWcgMwogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE1CiAgICAvLyBmb3IgaiBpbiB1cmFuZ2UoY291bnQubmF0aXZlKToKICAgIGZyYW1lX2RpZyAwCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIGNsb3NlX2Zvcl9oZWFkZXJAMwoKY2xvc2VfdGVybmFyeV9mYWxzZUAxMDoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE5CiAgICAvLyAoU3RyaW5nKCJdIikgKyAoU3RyaW5nKCIiKSBpZiBqID09IGNvdW50Lm5hdGl2ZSAtIFVJbnQ2NCgxKSBlbHNlIFN0cmluZygiLCIpKSkKICAgIHB1c2hieXRlcyAiLCIKICAgIGIgY2xvc2VfdGVybmFyeV9tZXJnZUAxMQoKY2xvc2VfdGVybmFyeV9mYWxzZUAxMjoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjIxCiAgICAvLyBlbHNlIFN0cmluZygiLCIpCiAgICBwdXNoYnl0ZXMgIiwiCiAgICBiIGNsb3NlX3Rlcm5hcnlfbWVyZ2VAMTMKCmNsb3NlX3Rlcm5hcnlfZmFsc2VANjoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjE2CiAgICAvLyBub3RlICs9IFN0cmluZygiWyIpIGlmIGogPT0gMCBlbHNlIFN0cmluZygiIikKICAgIGJ5dGVjXzEgLy8gIiIKICAgIGIgY2xvc2VfdGVybmFyeV9tZXJnZUA3CgpjbG9zZV9hZnRlcl9mb3JAMTU6CiAgICBmcmFtZV9kaWcgNgogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNgogICAgYiBjbG9zZV9mb3JfaGVhZGVyQDEKCmNsb3NlX2FmdGVyX2ZvckAxNzoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjIzLTIzMQogICAgLy8gcmVzdWx0ID0gaXR4bi5Bc3NldENvbmZpZygKICAgIC8vICAgICB0b3RhbD1VSW50NjQoMSksCiAgICAvLyAgICAgZGVjaW1hbHM9VUludDY0KDApLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gICAgIGFzc2V0X25hbWU9U3RyaW5nKCJbVk9URSBSRVNVTFRdICIpICsgc2VsZi52b3RlX2lkLnZhbHVlLm5hdGl2ZSwKICAgIC8vICAgICB1bml0X25hbWU9U3RyaW5nKCJWT1RFUlNMVCIpLAogICAgLy8gICAgIHVybD1zZWxmLm5mdF9pbWFnZV91cmwudmFsdWUsCiAgICAvLyAgICAgbm90ZT1ub3RlICsgU3RyaW5nKCJdfX0iKSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjI3CiAgICAvLyBhc3NldF9uYW1lPVN0cmluZygiW1ZPVEUgUkVTVUxUXSAiKSArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAidm90ZV9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlX2lkIGV4aXN0cwogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hieXRlcyAiW1ZPVEUgUkVTVUxUXSAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjI5CiAgICAvLyB1cmw9c2VsZi5uZnRfaW1hZ2VfdXJsLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE0IC8vICJuZnRfaW1hZ2VfdXJsIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm5mdF9pbWFnZV91cmwgZXhpc3RzCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIzMAogICAgLy8gbm90ZT1ub3RlICsgU3RyaW5nKCJdfX0iKSwKICAgIGZyYW1lX2RpZyAzCiAgICBwdXNoYnl0ZXMgIl19fSIKICAgIGNvbmNhdAogICAgaXR4bl9maWVsZCBOb3RlCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIyOAogICAgLy8gdW5pdF9uYW1lPVN0cmluZygiVk9URVJTTFQiKSwKICAgIHB1c2hieXRlcyAiVk9URVJTTFQiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIyNgogICAgLy8gZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjI1CiAgICAvLyBkZWNpbWFscz1VSW50NjQoMCksCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIyNAogICAgLy8gdG90YWw9VUludDY0KDEpLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMjMKICAgIC8vIHJlc3VsdCA9IGl0eG4uQXNzZXRDb25maWcoCiAgICBwdXNoaW50IDMgLy8gYWNmZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIyMy0yMzEKICAgIC8vIHJlc3VsdCA9IGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgdG90YWw9VUludDY0KDEpLAogICAgLy8gICAgIGRlY2ltYWxzPVVJbnQ2NCgwKSwKICAgIC8vICAgICBkZWZhdWx0X2Zyb3plbj1GYWxzZSwKICAgIC8vICAgICBhc3NldF9uYW1lPVN0cmluZygiW1ZPVEUgUkVTVUxUXSAiKSArIHNlbGYudm90ZV9pZC52YWx1ZS5uYXRpdmUsCiAgICAvLyAgICAgdW5pdF9uYW1lPVN0cmluZygiVk9URVJTTFQiKSwKICAgIC8vICAgICB1cmw9c2VsZi5uZnRfaW1hZ2VfdXJsLnZhbHVlLAogICAgLy8gICAgIG5vdGU9bm90ZSArIFN0cmluZygiXX19IiksCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyMzMKICAgIC8vIHNlbGYubmZ0X2Fzc2V0X2lkLnZhbHVlID0gcmVzdWx0LmNyZWF0ZWRfYXNzZXQuaWQKICAgIGJ5dGVjIDE1IC8vICJuZnRfYXNzZXRfaWQiCiAgICBpdHhuIENyZWF0ZWRBc3NldElECiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuc21hcnRfY29udHJhY3RzLnZvdGluZ19yb3VuZC5jb250cmFjdC5Wb3RpbmdSb3VuZC52b3RlKGZ1bmRfbWluX2JhbF9yZXE6IHVpbnQ2NCwgc2lnbmF0dXJlOiBieXRlcywgYW5zd2VyX2lkczogYnl0ZXMpIC0+IHZvaWQ6CnZvdGU6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjIzNS0yMzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHZvdGUoCiAgICAvLyAgICAgc2VsZiwgZnVuZF9taW5fYmFsX3JlcTogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sIHNpZ25hdHVyZTogYXJjNC5EeW5hbWljQnl0ZXMsIGFuc3dlcl9pZHM6IFZvdGVJbmRleEFycmF5CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjM5CiAgICAvLyBlbnN1cmVfYnVkZ2V0KFVJbnQ2NCg3NzAwKSkKICAgIHB1c2hpbnQgNzcwMCAvLyA3NzAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI0MQogICAgLy8gYXNzZXJ0IHNlbGYuYWxsb3dlZF90b192b3RlKHNpZ25hdHVyZS5uYXRpdmUpLCAiTm90IGFsbG93ZWQgdG8gdm90ZSIKICAgIGZyYW1lX2RpZyAtMgogICAgZXh0cmFjdCAyIDAKICAgIGNhbGxzdWIgYWxsb3dlZF90b192b3RlCiAgICBhc3NlcnQgLy8gTm90IGFsbG93ZWQgdG8gdm90ZQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyNDIKICAgIC8vIGFzc2VydCBzZWxmLnZvdGluZ19vcGVuKCksICJWb3Rpbmcgbm90IG9wZW4iCiAgICBjYWxsc3ViIHZvdGluZ19vcGVuCiAgICBhc3NlcnQgLy8gVm90aW5nIG5vdCBvcGVuCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyByZXR1cm4gc2VsZi52b3Rlcy5tYXliZShhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikpWzFdCiAgICB0eG4gU2VuZGVyCiAgICBib3hfZ2V0CiAgICBidXJ5IDEKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjQzCiAgICAvLyBhc3NlcnQgbm90IHNlbGYuYWxyZWFkeV92b3RlZCgpLCAiQWxyZWFkeSB2b3RlZCIKICAgICEKICAgIGFzc2VydCAvLyBBbHJlYWR5IHZvdGVkCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI0NQogICAgLy8gYXNzZXJ0IGFuc3dlcl9pZHMubGVuZ3RoID09IHNlbGYub3B0aW9uX2NvdW50cy52YWx1ZS5sZW5ndGgsICJOdW1iZXIgb2YgYW5zd2VycyBpbmNvcnJlY3QiCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm9wdGlvbl9jb3VudHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3B0aW9uX2NvdW50cyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gTnVtYmVyIG9mIGFuc3dlcnMgaW5jb3JyZWN0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI0NwogICAgLy8gbWluX2JhbF9yZXEgPSBVSW50NjQoMl81MDApICsgKFVJbnQ2NCgzMiArIDIpICsgYW5zd2VyX2lkcy5sZW5ndGgpICogVUludDY0KDQwMCkKICAgIHB1c2hpbnQgMzQgLy8gMzQKICAgICsKICAgIGludGMgNCAvLyA0MDAKICAgICoKICAgIHB1c2hpbnQgMjUwMCAvLyAyNTAwCiAgICArCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI0OAogICAgLy8gYXNzZXJ0IGZ1bmRfbWluX2JhbF9yZXEucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywgIlBheW1lbnQgbXVzdCBiZSB0byBhcHAgYWRkcmVzcyIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgbXVzdCBiZSB0byBhcHAgYWRkcmVzcwogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyNDkKICAgIC8vIGxvZyhtaW5fYmFsX3JlcSkKICAgIGR1cAogICAgaXRvYgogICAgbG9nCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI1MAogICAgLy8gYXNzZXJ0IGZ1bmRfbWluX2JhbF9yZXEuYW1vdW50ID09IG1pbl9iYWxfcmVxLCAiUGF5bWVudCBtdXN0IGJlIHRoZSBleGFjdCBtaW4gYmFsYW5jZSByZXF1aXJlbWVudCIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQW1vdW50CiAgICA9PQogICAgYXNzZXJ0IC8vIFBheW1lbnQgbXVzdCBiZSB0aGUgZXhhY3QgbWluIGJhbGFuY2UgcmVxdWlyZW1lbnQKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjUyCiAgICAvLyBjdW11bGF0aXZlX29mZnNldCA9IFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjUzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi5vcHRpb25fY291bnRzLnZhbHVlLmxlbmd0aCk6CiAgICBkdXAKICAgIGJ5dGVjXzAgLy8gIm9wdGlvbl9jb3VudHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3B0aW9uX2NvdW50cyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18wIC8vIDAKCnZvdGVfZm9yX2hlYWRlckAxOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyNTMKICAgIC8vIGZvciBpIGluIHVyYW5nZShzZWxmLm9wdGlvbl9jb3VudHMudmFsdWUubGVuZ3RoKToKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgMQogICAgPAogICAgYnogdm90ZV9hZnRlcl9mb3JANAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyNTQKICAgIC8vIGFzc2VydCBhbnN3ZXJfaWRzW2ldIDwgc2VsZi5vcHRpb25fY291bnRzLnZhbHVlW2ldLCAiQW5zd2VyIG9wdGlvbiBpbmRleCBpbnZhbGlkIgogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm9wdGlvbl9jb3VudHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3B0aW9uX2NvdW50cyBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDEKICAgIGI+CiAgICBhc3NlcnQgLy8gQW5zd2VyIG9wdGlvbiBpbmRleCBpbnZhbGlkCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI1NgogICAgLy8gcXVlc3Rpb25fb2Zmc2V0ID0gY3VtdWxhdGl2ZV9vZmZzZXQgKyBhbnN3ZXJfaWRzW2ldLm5hdGl2ZQogICAgYnRvaQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICArCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI2MAogICAgLy8gb3AuaXRvYihvcC5idG9pKG9wLkJveC5leHRyYWN0KHNlbGYudGFsbGllcy5rZXksIHF1ZXN0aW9uX29mZnNldCwgVUludDY0KDgpKSkgKyBVSW50NjQoMSkpLAogICAgYnl0ZWNfMiAvLyAweDU2CiAgICBkaWcgMQogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgaXRvYgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyNTgKICAgIC8vIHNlbGYudGFsbGllcy5rZXksCiAgICBieXRlY18yIC8vIDB4NTYKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjU3LTI2MQogICAgLy8gb3AuQm94LnJlcGxhY2UoCiAgICAvLyAgICAgc2VsZi50YWxsaWVzLmtleSwKICAgIC8vICAgICBxdWVzdGlvbl9vZmZzZXQsCiAgICAvLyAgICAgb3AuaXRvYihvcC5idG9pKG9wLkJveC5leHRyYWN0KHNlbGYudGFsbGllcy5rZXksIHF1ZXN0aW9uX29mZnNldCwgVUludDY0KDgpKSkgKyBVSW50NjQoMSkpLAogICAgLy8gKQogICAgY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjYzCiAgICAvLyBjdW11bGF0aXZlX29mZnNldCArPSBzZWxmLm9wdGlvbl9jb3VudHMudmFsdWVbaV0ubmF0aXZlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAib3B0aW9uX2NvdW50cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vcHRpb25fY291bnRzIGV4aXN0cwogICAgZXh0cmFjdCAyIDAKICAgIGRpZyAyCiAgICBpbnRjXzEgLy8gMQogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy92b3Rpbmdfcm91bmQvY29udHJhY3QucHk6MjUzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi5vcHRpb25fY291bnRzLnZhbHVlLmxlbmd0aCk6CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAyCiAgICBiIHZvdGVfZm9yX2hlYWRlckAxCgp2b3RlX2FmdGVyX2ZvckA0OgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL3ZvdGluZ19yb3VuZC9jb250cmFjdC5weToyNjUKICAgIC8vIHNlbGYudm90ZXNbYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpXSA9IGFuc3dlcl9pZHMuY29weSgpCiAgICB0eG4gU2VuZGVyCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfcHV0CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvdm90aW5nX3JvdW5kL2NvbnRyYWN0LnB5OjI2NgogICAgLy8gc2VsZi52b3Rlcl9jb3VudC52YWx1ZSArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJ2b3Rlcl9jb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3Rlcl9jb3VudCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlYyA2IC8vICJ2b3Rlcl9jb3VudCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5zbWFydF9jb250cmFjdHMuYmFzZS5jb250cmFjdC5QZXJtYW5lbmNlQ29udHJvbEFSQzRDb250cmFjdC5kZWxldGUoKSAtPiB2b2lkOgpkZWxldGU6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvYmFzZS9jb250cmFjdC5weTozMC0zMQogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBkZWxldGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL2Jhc2UvY29udHJhY3QucHk6MzIKICAgIC8vIGFzc2VydCBUZW1wbGF0ZVZhcltib29sXShERUxFVEFCTEVfVEVNUExBVEVfTkFNRSksICJDaGVjayBhcHAgaXMgZGVsZXRhYmxlIgogICAgaW50YyA1IC8vIFRNUExfREVMRVRBQkxFCiAgICBhc3NlcnQgLy8gQ2hlY2sgYXBwIGlzIGRlbGV0YWJsZQogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL2Jhc2UvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYuYXV0aG9yaXplX2NyZWF0b3IoKQogICAgY2FsbHN1YiBhdXRob3JpemVfY3JlYXRvcgogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuc21hcnRfY29udHJhY3RzLmJhc2UuY29udHJhY3QuQmFzZUFSQzRDb250cmFjdC5hdXRob3JpemVfY3JlYXRvcigpIC0+IHZvaWQ6CmF1dGhvcml6ZV9jcmVhdG9yOgogICAgLy8gZXhhbXBsZXMvc21hcnRfY29udHJhY3RzL2Jhc2UvY29udHJhY3QucHk6OC05CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGF1dGhvcml6ZV9jcmVhdG9yKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy9iYXNlL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAidW5hdXRob3JpemVkIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIHVuYXV0aG9yaXplZAogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuc21hcnRfY29udHJhY3RzLmJhc2UuY29udHJhY3QuQmFzZUFSQzRDb250cmFjdC5pdG9hKGk6IHVpbnQ2NCkgLT4gYnl0ZXM6Cml0b2E6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvYmFzZS9jb250cmFjdC5weToxMi0xMwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBpdG9hKHNlbGYsIGk6IFVJbnQ2NCkgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICBieXRlY18xIC8vICIiCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvYmFzZS9jb250cmFjdC5weToxNAogICAgLy8gaWYgaSA9PSBVSW50NjQoMCk6CiAgICBmcmFtZV9kaWcgLTEKICAgIGJueiBpdG9hX2Vsc2VfYm9keUAyCiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvYmFzZS9jb250cmFjdC5weToxNQogICAgLy8gcmV0dXJuIFN0cmluZygiMCIpCiAgICBwdXNoYnl0ZXMgIjAiCiAgICBzd2FwCiAgICByZXRzdWIKCml0b2FfZWxzZV9ib2R5QDI6CiAgICAvLyBleGFtcGxlcy9zbWFydF9jb250cmFjdHMvYmFzZS9jb250cmFjdC5weToxNwogICAgLy8gcmV0dXJuIChzZWxmLml0b2EoaSAvLyBVSW50NjQoMTApKSBpZiAoaSAvLyBVSW50NjQoMTApKSA+IFVJbnQ2NCgwKSBlbHNlIFN0cmluZygiIikpICsgU3RyaW5nLmZyb21fYnl0ZXMoCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMyAvLyAxMAogICAgLwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGJ6IGl0b2FfdGVybmFyeV9mYWxzZUA0CiAgICBmcmFtZV9kaWcgMAogICAgY2FsbHN1YiBpdG9hCgppdG9hX3Rlcm5hcnlfbWVyZ2VANToKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy9iYXNlL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBTdHJpbmcoIjAxMjM0NTY3ODkiKS5ieXRlc1tpICUgVUludDY0KDEwKV0KICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18zIC8vIDEwCiAgICAlCiAgICBwdXNoYnl0ZXMgIjAxMjM0NTY3ODkiCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMQogICAgZXh0cmFjdDMKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy9iYXNlL2NvbnRyYWN0LnB5OjE3LTE5CiAgICAvLyByZXR1cm4gKHNlbGYuaXRvYShpIC8vIFVJbnQ2NCgxMCkpIGlmIChpIC8vIFVJbnQ2NCgxMCkpID4gVUludDY0KDApIGVsc2UgU3RyaW5nKCIiKSkgKyBTdHJpbmcuZnJvbV9ieXRlcygKICAgIC8vICAgICBTdHJpbmcoIjAxMjM0NTY3ODkiKS5ieXRlc1tpICUgVUludDY0KDEwKV0KICAgIC8vICkKICAgIGNvbmNhdAogICAgc3dhcAogICAgcmV0c3ViCgppdG9hX3Rlcm5hcnlfZmFsc2VANDoKICAgIC8vIGV4YW1wbGVzL3NtYXJ0X2NvbnRyYWN0cy9iYXNlL2NvbnRyYWN0LnB5OjE3CiAgICAvLyByZXR1cm4gKHNlbGYuaXRvYShpIC8vIFVJbnQ2NCgxMCkpIGlmIChpIC8vIFVJbnQ2NCgxMCkpID4gVUludDY0KDApIGVsc2UgU3RyaW5nKCIiKSkgKyBTdHJpbmcuZnJvbV9ieXRlcygKICAgIGJ5dGVjXzEgLy8gIiIKICAgIGIgaXRvYV90ZXJuYXJ5X21lcmdlQDUK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":["DeleteApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type VotingPreconditions = {
  isVotingOpen: bigint,
  isAllowedToVote: bigint,
  hasAlreadyVoted: bigint,
  currentTime: bigint
}


/**
 * Converts the ABI tuple representation of a VotingPreconditions to the struct representation
 */
export function VotingPreconditionsFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VotingPreconditions, APP_SPEC.structs) as VotingPreconditions
}

/**
 * The argument types for the VotingRound contract
 */
export type VotingRoundArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': {
      signature: Uint8Array
    }
    'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': {
      voteId: string
      snapshotPublicKey: Uint8Array
      metadataIpfsCid: string
      startTime: bigint | number
      endTime: bigint | number
      optionCounts: bigint[] | number[]
      quorum: bigint | number
      nftImageUrl: string
    }
    'bootstrap(pay)void': {
      fundMinBalReq: AppMethodCallTransactionArgument
    }
    'close()void': Record<string, never>
    'vote(pay,byte[],uint8[])void': {
      fundMinBalReq: AppMethodCallTransactionArgument
      signature: Uint8Array
      answerIds: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': [signature: Uint8Array]
    'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': [voteId: string, snapshotPublicKey: Uint8Array, metadataIpfsCid: string, startTime: bigint | number, endTime: bigint | number, optionCounts: bigint[] | number[], quorum: bigint | number, nftImageUrl: string]
    'bootstrap(pay)void': [fundMinBalReq: AppMethodCallTransactionArgument]
    'close()void': []
    'vote(pay,byte[],uint8[])void': [fundMinBalReq: AppMethodCallTransactionArgument, signature: Uint8Array, answerIds: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type VotingRoundReturns = {
  'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': VotingPreconditions
  'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': void
  'bootstrap(pay)void': void
  'close()void': void
  'vote(pay,byte[],uint8[])void': void
}

/**
 * Defines the types of available calls and state of the VotingRound smart contract.
 */
export type VotingRoundTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_preconditions(byte[])(uint64,uint64,uint64,uint64)' | 'get_preconditions', {
      argsObj: VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
      argsTuple: VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
      returns: VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
    }>
    & Record<'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void' | 'create', {
      argsObj: VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
      argsTuple: VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
      returns: VotingRoundReturns['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
    }>
    & Record<'bootstrap(pay)void' | 'bootstrap', {
      argsObj: VotingRoundArgs['obj']['bootstrap(pay)void']
      argsTuple: VotingRoundArgs['tuple']['bootstrap(pay)void']
      returns: VotingRoundReturns['bootstrap(pay)void']
    }>
    & Record<'close()void' | 'close', {
      argsObj: VotingRoundArgs['obj']['close()void']
      argsTuple: VotingRoundArgs['tuple']['close()void']
      returns: VotingRoundReturns['close()void']
    }>
    & Record<'vote(pay,byte[],uint8[])void' | 'vote', {
      argsObj: VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void']
      argsTuple: VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']
      returns: VotingRoundReturns['vote(pay,byte[],uint8[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * The unix timestamp of the time the vote was closed
         */
        closeTime: bigint
        /**
         * The unix timestamp of the ending time of voting_round
         */
        endTime: bigint
        /**
         * Whether or not the contract has been bootstrapped with answers
         */
        isBootstrapped: bigint
        /**
         * The IPFS content ID of the voting_round metadata file
         */
        metadataIpfsCid: BinaryState
        /**
         * The asset ID of a result NFT if one has been created
         */
        nftAssetId: bigint
        /**
         * The IPFS URL of the default image to use as the media of the result NFT
         */
        nftImageUrl: BinaryState
        /**
         * The number of options for each question
         */
        optionCounts: BinaryState
        /**
         * The minimum number of voters to reach quorum
         */
        quorum: bigint
        /**
         * The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot
         */
        snapshotPublicKey: BinaryState
        /**
         * The unix timestamp of the starting time of voting_round
         */
        startTime: bigint
        /**
         * The total number of options
         */
        totalOptions: bigint
        /**
         * The identifier of this voting_round round
         */
        voteId: BinaryState
        /**
         * The minimum number of voters who have voted
         */
        voterCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VotingRoundSignatures = keyof VotingRoundTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VotingRoundNonVoidMethodSignatures = keyof VotingRoundTypes['methods'] extends infer T ? T extends keyof VotingRoundTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the VotingRound smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VotingRoundSignatures> = VotingRoundTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VotingRound smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingRoundSignatures> = VotingRoundTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VotingRoundTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type VotingRoundCreateCallParams =
  | Expand<CallParams<VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & {method: 'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type VotingRoundDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type VotingRoundDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: VotingRoundCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: VotingRoundDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the VotingRound smart contract
 */
export abstract class VotingRoundParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends VotingRoundCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void':
            return VotingRoundParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the VotingRound smart contract using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.voteId, params.args.snapshotPublicKey, params.args.metadataIpfsCid, params.args.startTime, params.args.endTime, params.args.optionCounts, params.args.quorum, params.args.nftImageUrl],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPreconditions(params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_preconditions(byte[])(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundMinBalReq],
    }
  }
  /**
   * Constructs a no op call for the close()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static close(params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'close()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the vote(pay,byte[],uint8[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(pay,byte[],uint8[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundMinBalReq, params.args.signature, params.args.answerIds],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the VotingRound smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class VotingRoundFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `VotingRoundFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new VotingRoundClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new VotingRoundClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the VotingRound smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: VotingRoundDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? VotingRoundParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (VotingRoundCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new VotingRoundClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingRound smart contract using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(VotingRoundParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the VotingRound smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingRound smart contract using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(VotingRoundParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingRound smart contract using an ABI method call using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<VotingRoundArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(VotingRoundParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | VotingRoundReturns['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']) }, appClient: new VotingRoundClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the VotingRound smart contract
 */
export class VotingRoundClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VotingRoundClient`
   *
   * @param appClient An `AppClient` instance which has been created with the VotingRound app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VotingRoundClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VotingRoundNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `VotingRoundClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VotingRoundClient> {
    return new VotingRoundClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VotingRoundClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VotingRoundClient> {
    return new VotingRoundClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the VotingRound smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the VotingRound smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPreconditions: (params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.getPreconditions(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    close: (params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.close(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundParamsFactory.vote(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the VotingRound smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the VotingRound smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPreconditions: (params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.getPreconditions(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    close: (params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.close(params))
    },

    /**
     * Makes a call to the VotingRound smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundParamsFactory.vote(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the VotingRound smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the VotingRound smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPreconditions: async (params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.getPreconditions(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the VotingRound smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['bootstrap(pay)void'])}
    },

    /**
     * Makes a call to the VotingRound smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    close: async (params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.close(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['close()void'])}
    },

    /**
     * Makes a call to the VotingRound smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundReturns['vote(pay,byte[],uint8[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VotingRoundClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the VotingRound smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPreconditions(params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(VotingRoundParamsFactory.getPreconditions(params))
    return result.return as unknown as VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current VotingRound app
   */
  state = {
    /**
     * Methods to access global state for the current VotingRound app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          closeTime: result.close_time,
          endTime: result.end_time,
          isBootstrapped: result.is_bootstrapped,
          metadataIpfsCid: new BinaryStateValue(result.metadata_ipfs_cid),
          nftAssetId: result.nft_asset_id,
          nftImageUrl: new BinaryStateValue(result.nft_image_url),
          optionCounts: new BinaryStateValue(result.option_counts),
          quorum: result.quorum,
          snapshotPublicKey: new BinaryStateValue(result.snapshot_public_key),
          startTime: result.start_time,
          totalOptions: result.total_options,
          voteId: new BinaryStateValue(result.vote_id),
          voterCount: result.voter_count,
        }
      },
      /**
       * Get the current value of the close_time key in global state
       */
      closeTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("close_time")) as bigint | undefined },
      /**
       * Get the current value of the end_time key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("end_time")) as bigint | undefined },
      /**
       * Get the current value of the is_bootstrapped key in global state
       */
      isBootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the metadata_ipfs_cid key in global state
       */
      metadataIpfsCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("metadata_ipfs_cid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the nft_asset_id key in global state
       */
      nftAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nft_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the nft_image_url key in global state
       */
      nftImageUrl: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("nft_image_url")) as Uint8Array | undefined) },
      /**
       * Get the current value of the option_counts key in global state
       */
      optionCounts: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("option_counts")) as Uint8Array | undefined) },
      /**
       * Get the current value of the quorum key in global state
       */
      quorum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum")) as bigint | undefined },
      /**
       * Get the current value of the snapshot_public_key key in global state
       */
      snapshotPublicKey: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("snapshot_public_key")) as Uint8Array | undefined) },
      /**
       * Get the current value of the start_time key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("start_time")) as bigint | undefined },
      /**
       * Get the current value of the total_options key in global state
       */
      totalOptions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_options")) as bigint | undefined },
      /**
       * Get the current value of the vote_id key in global state
       */
      voteId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("vote_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the voter_count key in global state
       */
      voterCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voter_count")) as bigint | undefined },
    },
  }

  public newGroup(): VotingRoundComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_preconditions(byte[])(uint64,uint64,uint64,uint64) method call against the VotingRound contract
       */
      getPreconditions(params: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPreconditions(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_preconditions(byte[])(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a bootstrap(pay)void method call against the VotingRound contract
       */
      bootstrap(params: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a close()void method call against the VotingRound contract
       */
      close(params: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.close(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote(pay,byte[],uint8[])void method call against the VotingRound contract
       */
      vote(params: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the VotingRound contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VotingRoundComposer
  }
}
export type VotingRoundComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPreconditions(params?: CallParams<VotingRoundArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the bootstrap(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<VotingRoundArgs['obj']['bootstrap(pay)void'] | VotingRoundArgs['tuple']['bootstrap(pay)void']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['bootstrap(pay)void'] | undefined]>

  /**
   * Calls the close()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  close(params?: CallParams<VotingRoundArgs['obj']['close()void'] | VotingRoundArgs['tuple']['close()void']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['close()void'] | undefined]>

  /**
   * Calls the vote(pay,byte[],uint8[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<VotingRoundArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundArgs['tuple']['vote(pay,byte[],uint8[])void']>): VotingRoundComposer<[...TReturns, VotingRoundReturns['vote(pay,byte[],uint8[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the VotingRound smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): VotingRoundComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VotingRound smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VotingRoundComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VotingRoundComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VotingRoundComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VotingRoundComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VotingRoundComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VotingRoundComposerResults<TReturns>>
}
export type VotingRoundComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

