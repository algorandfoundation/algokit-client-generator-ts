{
    "hints": {
        "create_abi(string)string": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "update_abi(string)string": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete_abi(string)string": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "opt_in()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "error()void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi(string)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi_uint32(uint32)uint32": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi_uint32_readonly(uint32)uint32": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi_uint64(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi_uint64_readonly(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi_txn(pay,string)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_with_references(asset,account,application)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value(string)string": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "constant",
                    "data": "default value"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value_int(uint64)uint64": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "constant",
                    "data": 123
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value_from_abi(string)string": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "constant",
                    "data": "default value"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value_from_global_state(uint64)uint64": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "global-state",
                    "data": "int1"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value_from_local_state(string)string": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "local-state",
                    "data": "local_bytes1"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "structs((string,uint64))(string,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "name_age": {
                    "name": "Input",
                    "elements": [
                        [
                            "name",
                            "string"
                        ],
                        [
                            "age",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "Output",
                    "elements": [
                        [
                            "message",
                            "string"
                        ],
                        [
                            "result",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "set_global(uint64,uint64,string,byte[4])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_local(uint64,uint64,string,byte[4])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_box(byte[4],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 2,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {
                "bytes1": {
                    "type": "bytes",
                    "key": "bytes1"
                },
                "bytes2": {
                    "type": "bytes",
                    "key": "bytes2"
                },
                "int1": {
                    "type": "uint64",
                    "key": "int1"
                },
                "int2": {
                    "type": "uint64",
                    "key": "int2"
                },
                "value": {
                    "type": "uint64",
                    "key": "value"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "local_bytes1": {
                    "type": "bytes",
                    "key": "local_bytes1"
                },
                "local_bytes2": {
                    "type": "bytes",
                    "key": "local_bytes2"
                },
                "local_int1": {
                    "type": "uint64",
                    "key": "local_int1"
                },
                "local_int2": {
                    "type": "uint64",
                    "key": "local_int2"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "State",
        "methods": [
            {
                "name": "create_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "input"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "update_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "input"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "delete_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "input"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "opt_in",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "error",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "call_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "call_abi_uint32",
                "args": [
                    {
                        "type": "uint32",
                        "name": "input"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint32"
                }
            },
            {
                "name": "call_abi_uint32_readonly",
                "args": [
                    {
                        "type": "uint32",
                        "name": "input"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint32"
                }
            },
            {
                "name": "call_abi_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "input"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "call_abi_uint64_readonly",
                "args": [
                    {
                        "type": "uint64",
                        "name": "input"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "call_abi_txn",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "call_with_references",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "application",
                        "name": "application"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "default_value",
                "args": [
                    {
                        "type": "string",
                        "name": "arg_with_default"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "default_value_int",
                "args": [
                    {
                        "type": "uint64",
                        "name": "arg_with_default"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "default_value_from_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "arg_with_default"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "default_value_from_global_state",
                "args": [
                    {
                        "type": "uint64",
                        "name": "arg_with_default"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "default_value_from_local_state",
                "args": [
                    {
                        "type": "string",
                        "name": "arg_with_default"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "structs",
                "args": [
                    {
                        "type": "(string,uint64)",
                        "name": "name_age"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(string,uint64)"
                }
            },
            {
                "name": "set_global",
                "args": [
                    {
                        "type": "uint64",
                        "name": "int1"
                    },
                    {
                        "type": "uint64",
                        "name": "int2"
                    },
                    {
                        "type": "string",
                        "name": "bytes1"
                    },
                    {
                        "type": "byte[4]",
                        "name": "bytes2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_local",
                "args": [
                    {
                        "type": "uint64",
                        "name": "int1"
                    },
                    {
                        "type": "uint64",
                        "name": "int2"
                    },
                    {
                        "type": "string",
                        "name": "bytes1"
                    },
                    {
                        "type": "byte[4]",
                        "name": "bytes2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_box",
                "args": [
                    {
                        "type": "byte[4]",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE",
        "opt_in": "CREATE",
        "update_application": "CALL",
        "delete_application": "CALL"
    }
}