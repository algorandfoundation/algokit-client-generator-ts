/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'

import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"State","structs":{"Input":[{"name":"name","type":"string"},{"name":"age","type":"uint64"}],"Output":[{"name":"message","type":"string"},{"name":"result","type":"uint64"}]},"methods":[{"name":"create_abi","args":[{"name":"input","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"update_abi","args":[{"name":"input","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"delete_abi","args":[{"name":"input","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"opt_in","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["OptIn"]}},{"name":"error","args":[],"returns":{"type":"void"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi","args":[{"name":"value","type":"string"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi_uint32","args":[{"name":"input","type":"uint32"}],"returns":{"type":"uint32"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi_uint32_readonly","args":[{"name":"input","type":"uint32"}],"returns":{"type":"uint32"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi_uint64","args":[{"name":"input","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi_uint64_readonly","args":[{"name":"input","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_abi_txn","args":[{"name":"txn","type":"pay"},{"name":"value","type":"string"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"call_with_references","args":[{"name":"asset","type":"asset"},{"name":"account","type":"account"},{"name":"application","type":"application"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value","args":[{"name":"arg_with_default","type":"string","defaultValue":{"source":"literal","data":"ZGVmYXVsdCB2YWx1ZQ==","type":"AVMString"}}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_int","args":[{"name":"arg_with_default","type":"uint64","defaultValue":{"source":"literal","data":"AAAAAAAAAHs=","type":"uint64"}}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_from_abi","args":[{"name":"arg_with_default","type":"string","defaultValue":{"source":"literal","data":"ZGVmYXVsdCB2YWx1ZQ==","type":"AVMString"}}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_from_global_state","args":[{"name":"arg_with_default","type":"uint64","defaultValue":{"source":"global","data":"aW50MQ==","type":"uint64"}}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"default_value_from_local_state","args":[{"name":"arg_with_default","type":"string","defaultValue":{"source":"local","data":"bG9jYWxfYnl0ZXMx","type":"AVMString"}}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"structs","args":[{"name":"name_age","type":"(string,uint64)","struct":"Input"}],"returns":{"type":"(string,uint64)","struct":"Output"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_global","args":[{"name":"int1","type":"uint64"},{"name":"int2","type":"uint64"},{"name":"bytes1","type":"string"},{"name":"bytes2","type":"byte[4]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_local","args":[{"name":"int1","type":"uint64"},{"name":"int2","type":"uint64"},{"name":"bytes1","type":"string"},{"name":"bytes2","type":"byte[4]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box","args":[{"name":"name","type":"byte[4]"},{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":3,"bytes":2},"local":{"ints":2,"bytes":2}},"keys":{"global":{"bytes1":{"key":"Ynl0ZXMx","keyType":"AVMString","valueType":"AVMBytes"},"bytes2":{"key":"Ynl0ZXMy","keyType":"AVMString","valueType":"AVMBytes"},"int1":{"key":"aW50MQ==","keyType":"AVMString","valueType":"AVMUint64"},"int2":{"key":"aW50Mg==","keyType":"AVMString","valueType":"AVMUint64"},"value":{"key":"dmFsdWU=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{"local_bytes1":{"key":"bG9jYWxfYnl0ZXMx","keyType":"AVMString","valueType":"AVMBytes"},"local_bytes2":{"key":"bG9jYWxfYnl0ZXMy","keyType":"AVMString","valueType":"AVMBytes"},"local_int1":{"key":"bG9jYWxfaW50MQ==","keyType":"AVMString","valueType":"AVMUint64"},"local_int2":{"key":"bG9jYWxfaW50Mg==","keyType":"AVMString","valueType":"AVMUint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp","OptIn"],"call":["DeleteApplication","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Input = {
  name: string,
  age: bigint
}


/**
 * Converts the ABI tuple representation of a Input to the struct representation
 */
export function InputFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Input, APP_SPEC.structs) as Input
}

export type Output = {
  message: string,
  result: bigint
}


/**
 * Converts the ABI tuple representation of a Output to the struct representation
 */
export function OutputFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Output, APP_SPEC.structs) as Output
}

/**
 * The argument types for the State contract
 */
export type StateArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_abi(string)string': {
      input: string
    }
    'update_abi(string)string': {
      input: string
    }
    'delete_abi(string)string': {
      input: string
    }
    'opt_in()void': Record<string, never>
    'error()void': Record<string, never>
    'call_abi(string)string': {
      value: string
    }
    'call_abi_uint32(uint32)uint32': {
      input: bigint | number
    }
    'call_abi_uint32_readonly(uint32)uint32': {
      input: bigint | number
    }
    'call_abi_uint64(uint64)uint64': {
      input: bigint | number
    }
    'call_abi_uint64_readonly(uint64)uint64': {
      input: bigint | number
    }
    'call_abi_txn(pay,string)string': {
      txn: AppMethodCallTransactionArgument
      value: string
    }
    'call_with_references(asset,account,application)uint64': {
      asset: bigint
      account: Uint8Array | string
      application: bigint
    }
    'default_value(string)string': {
      argWithDefault?: string
    }
    'default_value_int(uint64)uint64': {
      argWithDefault?: bigint | number
    }
    'default_value_from_abi(string)string': {
      argWithDefault?: string
    }
    'default_value_from_global_state(uint64)uint64': {
      argWithDefault?: bigint | number
    }
    'default_value_from_local_state(string)string': {
      argWithDefault?: string
    }
    'structs((string,uint64))(string,uint64)': {
      nameAge: Input
    }
    'set_global(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_local(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_box(byte[4],string)void': {
      name: Uint8Array
      value: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_abi(string)string': [input: string]
    'update_abi(string)string': [input: string]
    'delete_abi(string)string': [input: string]
    'opt_in()void': []
    'error()void': []
    'call_abi(string)string': [value: string]
    'call_abi_uint32(uint32)uint32': [input: bigint | number]
    'call_abi_uint32_readonly(uint32)uint32': [input: bigint | number]
    'call_abi_uint64(uint64)uint64': [input: bigint | number]
    'call_abi_uint64_readonly(uint64)uint64': [input: bigint | number]
    'call_abi_txn(pay,string)string': [txn: AppMethodCallTransactionArgument, value: string]
    'call_with_references(asset,account,application)uint64': [asset: bigint, account: Uint8Array | string, application: bigint]
    'default_value(string)string': [argWithDefault: string | undefined]
    'default_value_int(uint64)uint64': [argWithDefault: bigint | number | undefined]
    'default_value_from_abi(string)string': [argWithDefault: string | undefined]
    'default_value_from_global_state(uint64)uint64': [argWithDefault: bigint | number | undefined]
    'default_value_from_local_state(string)string': [argWithDefault: string | undefined]
    'structs((string,uint64))(string,uint64)': [nameAge: Input]
    'set_global(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_local(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_box(byte[4],string)void': [name: Uint8Array, value: string]
  }
}

/**
 * The return type for each method
 */
export type StateReturns = {
  'create_abi(string)string': string
  'update_abi(string)string': string
  'delete_abi(string)string': string
  'opt_in()void': void
  'error()void': void
  'call_abi(string)string': string
  'call_abi_uint32(uint32)uint32': number
  'call_abi_uint32_readonly(uint32)uint32': number
  'call_abi_uint64(uint64)uint64': bigint
  'call_abi_uint64_readonly(uint64)uint64': bigint
  'call_abi_txn(pay,string)string': string
  'call_with_references(asset,account,application)uint64': bigint
  'default_value(string)string': string
  'default_value_int(uint64)uint64': bigint
  'default_value_from_abi(string)string': string
  'default_value_from_global_state(uint64)uint64': bigint
  'default_value_from_local_state(string)string': string
  'structs((string,uint64))(string,uint64)': Output
  'set_global(uint64,uint64,string,byte[4])void': void
  'set_local(uint64,uint64,string,byte[4])void': void
  'set_box(byte[4],string)void': void
}

/**
 * Defines the types of available calls and state of the State smart contract.
 */
export type StateTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_abi(string)string' | 'create_abi', {
      argsObj: StateArgs['obj']['create_abi(string)string']
      argsTuple: StateArgs['tuple']['create_abi(string)string']
      returns: StateReturns['create_abi(string)string']
    }>
    & Record<'update_abi(string)string' | 'update_abi', {
      argsObj: StateArgs['obj']['update_abi(string)string']
      argsTuple: StateArgs['tuple']['update_abi(string)string']
      returns: StateReturns['update_abi(string)string']
    }>
    & Record<'delete_abi(string)string' | 'delete_abi', {
      argsObj: StateArgs['obj']['delete_abi(string)string']
      argsTuple: StateArgs['tuple']['delete_abi(string)string']
      returns: StateReturns['delete_abi(string)string']
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: StateArgs['obj']['opt_in()void']
      argsTuple: StateArgs['tuple']['opt_in()void']
      returns: StateReturns['opt_in()void']
    }>
    & Record<'error()void' | 'error', {
      argsObj: StateArgs['obj']['error()void']
      argsTuple: StateArgs['tuple']['error()void']
      returns: StateReturns['error()void']
    }>
    & Record<'call_abi(string)string' | 'call_abi', {
      argsObj: StateArgs['obj']['call_abi(string)string']
      argsTuple: StateArgs['tuple']['call_abi(string)string']
      returns: StateReturns['call_abi(string)string']
    }>
    & Record<'call_abi_uint32(uint32)uint32' | 'call_abi_uint32', {
      argsObj: StateArgs['obj']['call_abi_uint32(uint32)uint32']
      argsTuple: StateArgs['tuple']['call_abi_uint32(uint32)uint32']
      returns: StateReturns['call_abi_uint32(uint32)uint32']
    }>
    & Record<'call_abi_uint32_readonly(uint32)uint32' | 'call_abi_uint32_readonly', {
      argsObj: StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32']
      argsTuple: StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']
      returns: StateReturns['call_abi_uint32_readonly(uint32)uint32']
    }>
    & Record<'call_abi_uint64(uint64)uint64' | 'call_abi_uint64', {
      argsObj: StateArgs['obj']['call_abi_uint64(uint64)uint64']
      argsTuple: StateArgs['tuple']['call_abi_uint64(uint64)uint64']
      returns: StateReturns['call_abi_uint64(uint64)uint64']
    }>
    & Record<'call_abi_uint64_readonly(uint64)uint64' | 'call_abi_uint64_readonly', {
      argsObj: StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64']
      argsTuple: StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']
      returns: StateReturns['call_abi_uint64_readonly(uint64)uint64']
    }>
    & Record<'call_abi_txn(pay,string)string' | 'call_abi_txn', {
      argsObj: StateArgs['obj']['call_abi_txn(pay,string)string']
      argsTuple: StateArgs['tuple']['call_abi_txn(pay,string)string']
      returns: StateReturns['call_abi_txn(pay,string)string']
    }>
    & Record<'call_with_references(asset,account,application)uint64' | 'call_with_references', {
      argsObj: StateArgs['obj']['call_with_references(asset,account,application)uint64']
      argsTuple: StateArgs['tuple']['call_with_references(asset,account,application)uint64']
      returns: StateReturns['call_with_references(asset,account,application)uint64']
    }>
    & Record<'default_value(string)string' | 'default_value', {
      argsObj: StateArgs['obj']['default_value(string)string']
      argsTuple: StateArgs['tuple']['default_value(string)string']
      returns: StateReturns['default_value(string)string']
    }>
    & Record<'default_value_int(uint64)uint64' | 'default_value_int', {
      argsObj: StateArgs['obj']['default_value_int(uint64)uint64']
      argsTuple: StateArgs['tuple']['default_value_int(uint64)uint64']
      returns: StateReturns['default_value_int(uint64)uint64']
    }>
    & Record<'default_value_from_abi(string)string' | 'default_value_from_abi', {
      argsObj: StateArgs['obj']['default_value_from_abi(string)string']
      argsTuple: StateArgs['tuple']['default_value_from_abi(string)string']
      returns: StateReturns['default_value_from_abi(string)string']
    }>
    & Record<'default_value_from_global_state(uint64)uint64' | 'default_value_from_global_state', {
      argsObj: StateArgs['obj']['default_value_from_global_state(uint64)uint64']
      argsTuple: StateArgs['tuple']['default_value_from_global_state(uint64)uint64']
      returns: StateReturns['default_value_from_global_state(uint64)uint64']
    }>
    & Record<'default_value_from_local_state(string)string' | 'default_value_from_local_state', {
      argsObj: StateArgs['obj']['default_value_from_local_state(string)string']
      argsTuple: StateArgs['tuple']['default_value_from_local_state(string)string']
      returns: StateReturns['default_value_from_local_state(string)string']
    }>
    & Record<'structs((string,uint64))(string,uint64)' | 'structs', {
      argsObj: StateArgs['obj']['structs((string,uint64))(string,uint64)']
      argsTuple: StateArgs['tuple']['structs((string,uint64))(string,uint64)']
      returns: StateReturns['structs((string,uint64))(string,uint64)']
    }>
    & Record<'set_global(uint64,uint64,string,byte[4])void' | 'set_global', {
      argsObj: StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
      argsTuple: StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
      returns: StateReturns['set_global(uint64,uint64,string,byte[4])void']
    }>
    & Record<'set_local(uint64,uint64,string,byte[4])void' | 'set_local', {
      argsObj: StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
      argsTuple: StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
      returns: StateReturns['set_local(uint64,uint64,string,byte[4])void']
    }>
    & Record<'set_box(byte[4],string)void' | 'set_box', {
      argsObj: StateArgs['obj']['set_box(byte[4],string)void']
      argsTuple: StateArgs['tuple']['set_box(byte[4],string)void']
      returns: StateReturns['set_box(byte[4],string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bytes1: BinaryState
        bytes2: BinaryState
        int1: bigint
        int2: bigint
        value: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        localBytes1: BinaryState
        localBytes2: BinaryState
        localInt1: bigint
        localInt2: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StateSignatures = keyof StateTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StateNonVoidMethodSignatures = keyof StateTypes['methods'] extends infer T ? T extends keyof StateTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the State smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StateSignatures> = StateTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the State smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StateSignatures> = StateTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StateTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StateTypes['state']['local']['keys']



/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the State smart contract
 */
export abstract class StateParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the State smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static error(params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'error()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the call_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbi(params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_abi_uint32(uint32)uint32 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiUint32(params: CallParams<StateArgs['obj']['call_abi_uint32(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32(uint32)uint32']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_uint32(uint32)uint32' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.input],
    }
  }
  /**
   * Constructs a no op call for the call_abi_uint32_readonly(uint32)uint32 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiUint32Readonly(params: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_uint32_readonly(uint32)uint32' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.input],
    }
  }
  /**
   * Constructs a no op call for the call_abi_uint64(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiUint64(params: CallParams<StateArgs['obj']['call_abi_uint64(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_uint64(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.input],
    }
  }
  /**
   * Constructs a no op call for the call_abi_uint64_readonly(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiUint64Readonly(params: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_uint64_readonly(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.input],
    }
  }
  /**
   * Constructs a no op call for the call_abi_txn(pay,string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiTxn(params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_txn(pay,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_with_references(asset,account,application)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callWithReferences(params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_with_references(asset,account,application)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.account, params.args.application],
    }
  }
  /**
   * Constructs a no op call for the default_value(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValue(params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_int(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueInt(params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_int(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromAbi(params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_global_state(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromGlobalState(params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_global_state(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_local_state(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromLocalState(params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_local_state(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the structs((string,uint64))(string,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static structs(params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'structs((string,uint64))(string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nameAge],
    }
  }
  /**
   * Constructs a no op call for the set_global(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGlobal(params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_local(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setLocal(params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBox(params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box(byte[4],string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
}

/**
 * A client to make calls to the State smart contract
 */
export class StateClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StateClient`
   *
   * @param appClient An `AppClient` instance which has been created with the State app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StateClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StateNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StateClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StateClient> {
    return new StateClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StateClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StateClient> {
    return new StateClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the State smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.params.optIn(StateParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the State smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the State smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    error: (params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StateParamsFactory.error(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbi: (params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint32(uint32)uint32` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiUint32: (params: CallParams<StateArgs['obj']['call_abi_uint32(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32(uint32)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbiUint32(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint32_readonly(uint32)uint32` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiUint32Readonly: (params: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbiUint32Readonly(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint64(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiUint64: (params: CallParams<StateArgs['obj']['call_abi_uint64(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbiUint64(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint64_readonly(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiUint64Readonly: (params: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbiUint64Readonly(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiTxn: (params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbiTxn(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callWithReferences: (params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callWithReferences(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValue: (params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValue(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueInt: (params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueInt(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromAbi: (params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueFromAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromGlobalState: (params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueFromGlobalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromLocalState: (params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueFromLocalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `structs((string,uint64))(string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    structs: (params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.structs(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGlobal: (params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setLocal: (params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBox: (params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.setBox(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the State smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(StateParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the State smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the State smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    error: (params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.error(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbi: (params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint32(uint32)uint32` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiUint32: (params: CallParams<StateArgs['obj']['call_abi_uint32(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32(uint32)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbiUint32(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint32_readonly(uint32)uint32` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiUint32Readonly: (params: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbiUint32Readonly(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint64(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiUint64: (params: CallParams<StateArgs['obj']['call_abi_uint64(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbiUint64(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint64_readonly(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiUint64Readonly: (params: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbiUint64Readonly(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiTxn: (params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbiTxn(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callWithReferences: (params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callWithReferences(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValue: (params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValue(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueInt: (params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueInt(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromAbi: (params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueFromAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromGlobalState: (params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueFromGlobalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromLocalState: (params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueFromLocalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `structs((string,uint64))(string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    structs: (params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.structs(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGlobal: (params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setLocal: (params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBox: (params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.setBox(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the State smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(StateParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | StateReturns['opt_in()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the State smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the State smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    error: async (params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StateParamsFactory.error(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['error()void'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbi: async (params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbi(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint32(uint32)uint32` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiUint32: async (params: CallParams<StateArgs['obj']['call_abi_uint32(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32(uint32)uint32']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbiUint32(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi_uint32(uint32)uint32'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint32_readonly(uint32)uint32` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiUint32Readonly: async (params: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbiUint32Readonly(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi_uint32_readonly(uint32)uint32'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint64(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiUint64: async (params: CallParams<StateArgs['obj']['call_abi_uint64(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbiUint64(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi_uint64(uint64)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_uint64_readonly(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiUint64Readonly: async (params: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbiUint64Readonly(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi_uint64_readonly(uint64)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiTxn: async (params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbiTxn(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi_txn(pay,string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callWithReferences: async (params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callWithReferences(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_with_references(asset,account,application)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValue: async (params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValue(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueInt: async (params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueInt(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_int(uint64)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromAbi: async (params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromAbi(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_from_abi(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromGlobalState: async (params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_from_global_state(uint64)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromLocalState: async (params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromLocalState(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_from_local_state(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `structs((string,uint64))(string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    structs: async (params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.structs(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['structs((string,uint64))(string,uint64)'])}
    },

    /**
     * Makes a call to the State smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGlobal: async (params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.setGlobal(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['set_global(uint64,uint64,string,byte[4])void'])}
    },

    /**
     * Makes a call to the State smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setLocal: async (params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.setLocal(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['set_local(uint64,uint64,string,byte[4])void'])}
    },

    /**
     * Makes a call to the State smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBox: async (params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.setBox(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['set_box(byte[4],string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StateClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `error()void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async error(params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> = {args: []}) {
    const result = await this.appClient.send.call(StateParamsFactory.error(params))
    return result.return as unknown as StateReturns['error()void']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `call_abi(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbi(params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']>) {
    const result = await this.appClient.send.call(StateParamsFactory.callAbi(params))
    return result.return as unknown as StateReturns['call_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `call_abi_uint32_readonly(uint32)uint32` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbiUint32Readonly(params: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']>) {
    const result = await this.appClient.send.call(StateParamsFactory.callAbiUint32Readonly(params))
    return result.return as unknown as StateReturns['call_abi_uint32_readonly(uint32)uint32']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `call_abi_uint64_readonly(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbiUint64Readonly(params: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']>) {
    const result = await this.appClient.send.call(StateParamsFactory.callAbiUint64Readonly(params))
    return result.return as unknown as StateReturns['call_abi_uint64_readonly(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbiTxn(params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']>) {
    const result = await this.appClient.send.call(StateParamsFactory.callAbiTxn(params))
    return result.return as unknown as StateReturns['call_abi_txn(pay,string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValue(params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValue(params))
    return result.return as unknown as StateReturns['default_value(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueInt(params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueInt(params))
    return result.return as unknown as StateReturns['default_value_int(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromAbi(params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromAbi(params))
    return result.return as unknown as StateReturns['default_value_from_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromGlobalState(params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromGlobalState(params))
    return result.return as unknown as StateReturns['default_value_from_global_state(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromLocalState(params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromLocalState(params))
    return result.return as unknown as StateReturns['default_value_from_local_state(string)string']
  }

  /**
   * Methods to access state for the current State app
   */
  state = {
    /**
     * Methods to access global state for the current State app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bytes1: new BinaryStateValue(result.bytes1),
          bytes2: new BinaryStateValue(result.bytes2),
          int1: result.int1,
          int2: result.int2,
          value: result.value,
        }
      },
      /**
       * Get the current value of the bytes1 key in global state
       */
      bytes1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytes1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bytes2 key in global state
       */
      bytes2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytes2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the int1 key in global state
       */
      int1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("int1")) as bigint | undefined },
      /**
       * Get the current value of the int2 key in global state
       */
      int2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("int2")) as bigint | undefined },
      /**
       * Get the current value of the value key in global state
       */
      value: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("value")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current State app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localBytes1: new BinaryStateValue(result.local_bytes1),
            localBytes2: new BinaryStateValue(result.local_bytes2),
            localInt1: result.local_int1,
            localInt2: result.local_int2,
          }
        },
        /**
         * Get the current value of the local_bytes1 key in local state
         */
        localBytes1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("local_bytes1")) as Uint8Array | undefined) },
        /**
         * Get the current value of the local_bytes2 key in local state
         */
        localBytes2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("local_bytes2")) as Uint8Array | undefined) },
        /**
         * Get the current value of the local_int1 key in local state
         */
        localInt1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("local_int1")) as bigint | undefined },
        /**
         * Get the current value of the local_int2 key in local state
         */
        localInt2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("local_int2")) as bigint | undefined },
      }
    },
  }

  public newGroup(): StateComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a error()void method call against the State contract
       */
      error(params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.error(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a call_abi(string)string method call against the State contract
       */
      callAbi(params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi(string)string', v))
        return this
      },
      /**
       * Add a call_abi_uint32(uint32)uint32 method call against the State contract
       */
      callAbiUint32(params: CallParams<StateArgs['obj']['call_abi_uint32(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32(uint32)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiUint32(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_uint32(uint32)uint32', v))
        return this
      },
      /**
       * Add a call_abi_uint32_readonly(uint32)uint32 method call against the State contract
       */
      callAbiUint32Readonly(params: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiUint32Readonly(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_uint32_readonly(uint32)uint32', v))
        return this
      },
      /**
       * Add a call_abi_uint64(uint64)uint64 method call against the State contract
       */
      callAbiUint64(params: CallParams<StateArgs['obj']['call_abi_uint64(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiUint64(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_uint64(uint64)uint64', v))
        return this
      },
      /**
       * Add a call_abi_uint64_readonly(uint64)uint64 method call against the State contract
       */
      callAbiUint64Readonly(params: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiUint64Readonly(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_uint64_readonly(uint64)uint64', v))
        return this
      },
      /**
       * Add a call_abi_txn(pay,string)string method call against the State contract
       */
      callAbiTxn(params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_txn(pay,string)string', v))
        return this
      },
      /**
       * Add a call_with_references(asset,account,application)uint64 method call against the State contract
       */
      callWithReferences(params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callWithReferences(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_with_references(asset,account,application)uint64', v))
        return this
      },
      /**
       * Add a default_value(string)string method call against the State contract
       */
      defaultValue(params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value(string)string', v))
        return this
      },
      /**
       * Add a default_value_int(uint64)uint64 method call against the State contract
       */
      defaultValueInt(params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueInt(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_int(uint64)uint64', v))
        return this
      },
      /**
       * Add a default_value_from_abi(string)string method call against the State contract
       */
      defaultValueFromAbi(params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_abi(string)string', v))
        return this
      },
      /**
       * Add a default_value_from_global_state(uint64)uint64 method call against the State contract
       */
      defaultValueFromGlobalState(params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_global_state(uint64)uint64', v))
        return this
      },
      /**
       * Add a default_value_from_local_state(string)string method call against the State contract
       */
      defaultValueFromLocalState(params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromLocalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_local_state(string)string', v))
        return this
      },
      /**
       * Add a structs((string,uint64))(string,uint64) method call against the State contract
       */
      structs(params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.structs(params)))
        resultMappers.push((v) => client.decodeReturnValue('structs((string,uint64))(string,uint64)', v))
        return this
      },
      /**
       * Add a set_global(uint64,uint64,string,byte[4])void method call against the State contract
       */
      setGlobal(params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGlobal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_local(uint64,uint64,string,byte[4])void method call against the State contract
       */
      setLocal(params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setLocal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box(byte[4],string)void method call against the State contract
       */
      setBox(params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBox(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          optIn: (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the State contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StateComposer
  }
}
export type StateComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(params?: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']>): StateComposer<[...TReturns, StateReturns['error()void'] | undefined]>

  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbi(params?: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']>): StateComposer<[...TReturns, StateReturns['call_abi(string)string'] | undefined]>

  /**
   * Calls the call_abi_uint32(uint32)uint32 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiUint32(params?: CallParams<StateArgs['obj']['call_abi_uint32(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32(uint32)uint32']>): StateComposer<[...TReturns, StateReturns['call_abi_uint32(uint32)uint32'] | undefined]>

  /**
   * Calls the call_abi_uint32_readonly(uint32)uint32 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiUint32Readonly(params?: CallParams<StateArgs['obj']['call_abi_uint32_readonly(uint32)uint32'] | StateArgs['tuple']['call_abi_uint32_readonly(uint32)uint32']>): StateComposer<[...TReturns, StateReturns['call_abi_uint32_readonly(uint32)uint32'] | undefined]>

  /**
   * Calls the call_abi_uint64(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiUint64(params?: CallParams<StateArgs['obj']['call_abi_uint64(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64(uint64)uint64']>): StateComposer<[...TReturns, StateReturns['call_abi_uint64(uint64)uint64'] | undefined]>

  /**
   * Calls the call_abi_uint64_readonly(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiUint64Readonly(params?: CallParams<StateArgs['obj']['call_abi_uint64_readonly(uint64)uint64'] | StateArgs['tuple']['call_abi_uint64_readonly(uint64)uint64']>): StateComposer<[...TReturns, StateReturns['call_abi_uint64_readonly(uint64)uint64'] | undefined]>

  /**
   * Calls the call_abi_txn(pay,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiTxn(params?: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']>): StateComposer<[...TReturns, StateReturns['call_abi_txn(pay,string)string'] | undefined]>

  /**
   * Calls the call_with_references(asset,account,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callWithReferences(params?: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']>): StateComposer<[...TReturns, StateReturns['call_with_references(asset,account,application)uint64'] | undefined]>

  /**
   * Calls the default_value(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValue(params?: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']>): StateComposer<[...TReturns, StateReturns['default_value(string)string'] | undefined]>

  /**
   * Calls the default_value_int(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueInt(params?: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']>): StateComposer<[...TReturns, StateReturns['default_value_int(uint64)uint64'] | undefined]>

  /**
   * Calls the default_value_from_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromAbi(params?: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']>): StateComposer<[...TReturns, StateReturns['default_value_from_abi(string)string'] | undefined]>

  /**
   * Calls the default_value_from_global_state(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromGlobalState(params?: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']>): StateComposer<[...TReturns, StateReturns['default_value_from_global_state(uint64)uint64'] | undefined]>

  /**
   * Calls the default_value_from_local_state(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromLocalState(params?: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']>): StateComposer<[...TReturns, StateReturns['default_value_from_local_state(string)string'] | undefined]>

  /**
   * Calls the structs((string,uint64))(string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  structs(params?: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']>): StateComposer<[...TReturns, StateReturns['structs((string,uint64))(string,uint64)'] | undefined]>

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobal(params?: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']>): StateComposer<[...TReturns, StateReturns['set_global(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLocal(params?: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']>): StateComposer<[...TReturns, StateReturns['set_local(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(params?: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']>): StateComposer<[...TReturns, StateReturns['set_box(byte[4],string)void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the State smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']>): StateComposer<[...TReturns, StateReturns['opt_in()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the State smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StateComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StateComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StateComposerResults<TReturns>>
}
export type StateComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

