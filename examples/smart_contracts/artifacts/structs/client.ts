/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Structs","structs":{"NestedStruct":[{"name":"content","type":"Vector"}],"RootStruct":[{"name":"nested","type":"NestedStruct"}],"Vector":[{"name":"x","type":"string"},{"name":"y","type":"string"}]},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"give_me_root_struct","args":[],"returns":{"type":"(((string,string)))","struct":"RootStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":2}},"keys":{"global":{"my_struct":{"keyType":"AVMString","valueType":"Vector","key":"bXlfc3RydWN0"},"my_nested_struct":{"keyType":"AVMString","valueType":"RootStruct","key":"bXlfbmVzdGVkX3N0cnVjdA=="}},"local":{"my_localstate_struct":{"keyType":"AVMString","valueType":"Vector","key":"bXlfbG9jYWxzdGF0ZV9zdHJ1Y3Q="},"my_nested_localstate_struct":{"keyType":"AVMString","valueType":"RootStruct","key":"bXlfbmVzdGVkX2xvY2Fsc3RhdGVfc3RydWN0"}},"box":{"my_box_struct":{"keyType":"AVMString","valueType":"Vector","key":"bXlfYm94X3N0cnVjdA=="},"my_nested_box_struct":{"keyType":"AVMString","valueType":"RootStruct","key":"bXlfbmVzdGVkX2JveF9zdHJ1Y3Q="}}},"maps":{"global":{},"local":{},"box":{"my_boxmap_struct":{"keyType":"uint64","valueType":"Vector","prefix":"bXlfYm94bWFwX3N0cnVjdA=="},"my_nested_boxmap_struct":{"keyType":"uint64","valueType":"RootStruct","prefix":"bXlfbmVzdGVkX2JveG1hcF9zdHJ1Y3Q="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[214,244],"errorMessage":"OnCompletion is not NoOp"},{"pc":[202],"errorMessage":"OnCompletion is not OptIn"},{"pc":[273],"errorMessage":"can only call when creating"},{"pc":[205,217,247],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiABASYGCgAEAAcAATEAATIOAAIAAgAEAAcAATEAATINbXlfYm94X3N0cnVjdBRteV9uZXN0ZWRfYm94X3N0cnVjdBhteV9ib3htYXBfc3RydWN0AAAAAAAAAHsfbXlfbmVzdGVkX2JveG1hcF9zdHJ1Y3QAAAAAAAAAezEYQAAhgAlteV9zdHJ1Y3QoZ4AQbXlfbmVzdGVkX3N0cnVjdClnMRtBAGKCAwQCvs4RBKSjzpoEMMbVijYaAI4DAC4AEAADgQBDMRkiEkQxGESIAF8iQzEZFEQxGESAEhUffHUAAgACAAQABwABMQABMrAiQzEZFEQxGEQ2GgGIABaABBUffHVMULAiQzEZQP+1MRgURCJDigEBi/9XAgCAB0hlbGxvLCBMUEkVFlcGAkxQiYoAACq8SCoovyu8SCspvycEvEgnBCi/JwW8SCcFKb8xAIAUbXlfbG9jYWxzdGF0ZV9zdHJ1Y3QoZjEAgBtteV9uZXN0ZWRfbG9jYWxzdGF0ZV9zdHJ1Y3QpZok=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type NestedStruct = {
  content: Vector
}


/**
 * Converts the ABI tuple representation of a NestedStruct to the struct representation
 */
export function NestedStructFromTuple(abiTuple: [[string, string]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.NestedStruct, APP_SPEC.structs) as NestedStruct
}

export type RootStruct = {
  nested: NestedStruct
}


/**
 * Converts the ABI tuple representation of a RootStruct to the struct representation
 */
export function RootStructFromTuple(abiTuple: [[[string, string]]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.RootStruct, APP_SPEC.structs) as RootStruct
}

export type Vector = {
  x: string,
  y: string
}


/**
 * Converts the ABI tuple representation of a Vector to the struct representation
 */
export function VectorFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Vector, APP_SPEC.structs) as Vector
}

/**
 * The argument types for the Structs contract
 */
export type StructsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'give_me_root_struct()(((string,string)))': Record<string, never>
    'opt_in()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'give_me_root_struct()(((string,string)))': []
    'opt_in()void': []
  }
}

/**
 * The return type for each method
 */
export type StructsReturns = {
  'hello(string)string': string
  'give_me_root_struct()(((string,string)))': RootStruct
  'opt_in()void': void
}

/**
 * Defines the types of available calls and state of the Structs smart contract.
 */
export type StructsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: StructsArgs['obj']['hello(string)string']
      argsTuple: StructsArgs['tuple']['hello(string)string']
      returns: StructsReturns['hello(string)string']
    }>
    & Record<'give_me_root_struct()(((string,string)))' | 'give_me_root_struct', {
      argsObj: StructsArgs['obj']['give_me_root_struct()(((string,string)))']
      argsTuple: StructsArgs['tuple']['give_me_root_struct()(((string,string)))']
      returns: StructsReturns['give_me_root_struct()(((string,string)))']
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: StructsArgs['obj']['opt_in()void']
      argsTuple: StructsArgs['tuple']['opt_in()void']
      returns: StructsReturns['opt_in()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        myStruct: Vector
        myNestedStruct: RootStruct
      }
      maps: {}
    }
    local: {
      keys: {
        myLocalstateStruct: Vector
        myNestedLocalstateStruct: RootStruct
      }
      maps: {}
    }
    box: {
      keys: {
        myBoxStruct: Vector
        myNestedBoxStruct: RootStruct
      }
      maps: {
        myBoxmapStruct: Map<bigint | number, Vector>
        myNestedBoxmapStruct: Map<bigint | number, RootStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StructsSignatures = keyof StructsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StructsNonVoidMethodSignatures = keyof StructsTypes['methods'] extends infer T ? T extends keyof StructsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Structs smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StructsSignatures> = StructsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Structs smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StructsSignatures> = StructsTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StructsTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StructsTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = StructsTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StructsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StructsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StructsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Structs smart contract
 */
export abstract class StructsParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the Structs smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<StructsArgs['obj']['opt_in()void'] | StructsArgs['tuple']['opt_in()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<StructsArgs['obj']['hello(string)string'] | StructsArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the give_me_root_struct()(((string,string))) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static giveMeRootStruct(params: CallParams<StructsArgs['obj']['give_me_root_struct()(((string,string)))'] | StructsArgs['tuple']['give_me_root_struct()(((string,string)))']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'give_me_root_struct()(((string,string)))' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Structs smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StructsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StructsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StructsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StructsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Structs smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StructsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StructsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Structs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Structs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Structs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StructsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Structs smart contract
 */
export class StructsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StructsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Structs app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StructsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StructsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `StructsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StructsClient> {
    return new StructsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StructsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StructsClient> {
    return new StructsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Structs smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<StructsArgs['obj']['opt_in()void'] | StructsArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.params.optIn(StructsParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Structs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Structs smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<StructsArgs['obj']['hello(string)string'] | StructsArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructsParamsFactory.hello(params))
    },

    /**
     * Makes a call to the Structs smart contract using the `give_me_root_struct()(((string,string)))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    giveMeRootStruct: (params: CallParams<StructsArgs['obj']['give_me_root_struct()(((string,string)))'] | StructsArgs['tuple']['give_me_root_struct()(((string,string)))']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StructsParamsFactory.giveMeRootStruct(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Structs smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<StructsArgs['obj']['opt_in()void'] | StructsArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(StructsParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Structs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Structs smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<StructsArgs['obj']['hello(string)string'] | StructsArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructsParamsFactory.hello(params))
    },

    /**
     * Makes a call to the Structs smart contract using the `give_me_root_struct()(((string,string)))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    giveMeRootStruct: (params: CallParams<StructsArgs['obj']['give_me_root_struct()(((string,string)))'] | StructsArgs['tuple']['give_me_root_struct()(((string,string)))']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StructsParamsFactory.giveMeRootStruct(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Structs smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<StructsArgs['obj']['opt_in()void'] | StructsArgs['tuple']['opt_in()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(StructsParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | StructsReturns['opt_in()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Structs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Structs smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<StructsArgs['obj']['hello(string)string'] | StructsArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructsParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | StructsReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the Structs smart contract using the `give_me_root_struct()(((string,string)))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    giveMeRootStruct: async (params: CallParams<StructsArgs['obj']['give_me_root_struct()(((string,string)))'] | StructsArgs['tuple']['give_me_root_struct()(((string,string)))']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StructsParamsFactory.giveMeRootStruct(params))
      return {...result, return: result.return as unknown as (undefined | StructsReturns['give_me_root_struct()(((string,string)))'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StructsClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Structs app
   */
  state = {
    /**
     * Methods to access global state for the current Structs app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          myStruct: result.my_struct,
          myNestedStruct: result.my_nested_struct,
        }
      },
      /**
       * Get the current value of the my_struct key in global state
       */
      myStruct: async (): Promise<Vector | undefined> => { return (await this.appClient.state.global.getValue("my_struct")) as Vector | undefined },
      /**
       * Get the current value of the my_nested_struct key in global state
       */
      myNestedStruct: async (): Promise<RootStruct | undefined> => { return (await this.appClient.state.global.getValue("my_nested_struct")) as RootStruct | undefined },
    },
    /**
     * Methods to access local state for the current Structs app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            myLocalstateStruct: result.my_localstate_struct,
            myNestedLocalstateStruct: result.my_nested_localstate_struct,
          }
        },
        /**
         * Get the current value of the my_localstate_struct key in local state
         */
        myLocalstateStruct: async (): Promise<Vector | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("my_localstate_struct")) as Vector | undefined },
        /**
         * Get the current value of the my_nested_localstate_struct key in local state
         */
        myNestedLocalstateStruct: async (): Promise<RootStruct | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("my_nested_localstate_struct")) as RootStruct | undefined },
      }
    },
    /**
     * Methods to access box state for the current Structs app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          myBoxStruct: result.my_box_struct,
          myNestedBoxStruct: result.my_nested_box_struct,
        }
      },
      /**
       * Get the current value of the my_box_struct key in box state
       */
      myBoxStruct: async (): Promise<Vector | undefined> => { return (await this.appClient.state.box.getValue("my_box_struct")) as Vector | undefined },
      /**
       * Get the current value of the my_nested_box_struct key in box state
       */
      myNestedBoxStruct: async (): Promise<RootStruct | undefined> => { return (await this.appClient.state.box.getValue("my_nested_box_struct")) as RootStruct | undefined },
      /**
       * Get values from the my_boxmap_struct map in box state
       */
      myBoxmapStruct: {
        /**
         * Get all current values of the my_boxmap_struct map in box state
         */
        getMap: async (): Promise<Map<bigint, Vector>> => { return (await this.appClient.state.box.getMap("my_boxmap_struct")) as Map<bigint, Vector> },
        /**
         * Get a current value of the my_boxmap_struct map by key from box state
         */
        value: async (key: bigint | number): Promise<Vector | undefined> => { return await this.appClient.state.box.getMapValue("my_boxmap_struct", key) as Vector | undefined },
      },
      /**
       * Get values from the my_nested_boxmap_struct map in box state
       */
      myNestedBoxmapStruct: {
        /**
         * Get all current values of the my_nested_boxmap_struct map in box state
         */
        getMap: async (): Promise<Map<bigint, RootStruct>> => { return (await this.appClient.state.box.getMap("my_nested_boxmap_struct")) as Map<bigint, RootStruct> },
        /**
         * Get a current value of the my_nested_boxmap_struct map by key from box state
         */
        value: async (key: bigint | number): Promise<RootStruct | undefined> => { return await this.appClient.state.box.getMapValue("my_nested_boxmap_struct", key) as RootStruct | undefined },
      },
    },
  }

  public newGroup(): StructsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the Structs contract
       */
      hello(params: CallParams<StructsArgs['obj']['hello(string)string'] | StructsArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a give_me_root_struct()(((string,string))) method call against the Structs contract
       */
      giveMeRootStruct(params: CallParams<StructsArgs['obj']['give_me_root_struct()(((string,string)))'] | StructsArgs['tuple']['give_me_root_struct()(((string,string)))']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.giveMeRootStruct(params)))
        resultMappers.push((v) => client.decodeReturnValue('give_me_root_struct()(((string,string)))', v))
        return this
      },
      get optIn() {
        return {
          optIn: (params: CallParams<StructsArgs['obj']['opt_in()void'] | StructsArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Structs contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StructsComposer
  }
}
export type StructsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<StructsArgs['obj']['hello(string)string'] | StructsArgs['tuple']['hello(string)string']>): StructsComposer<[...TReturns, StructsReturns['hello(string)string'] | undefined]>

  /**
   * Calls the give_me_root_struct()(((string,string))) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  giveMeRootStruct(params?: CallParams<StructsArgs['obj']['give_me_root_struct()(((string,string)))'] | StructsArgs['tuple']['give_me_root_struct()(((string,string)))']>): StructsComposer<[...TReturns, StructsReturns['give_me_root_struct()(((string,string)))'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Structs smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<StructsArgs['obj']['opt_in()void'] | StructsArgs['tuple']['opt_in()void']>): StructsComposer<[...TReturns, StructsReturns['opt_in()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Structs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StructsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StructsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StructsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StructsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StructsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StructsComposerResults<TReturns>>
}
export type StructsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

