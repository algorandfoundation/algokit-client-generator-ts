/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"VotingRoundApp","structs":{"VotingPreconditions":[{"name":"isVotingOpen","type":"uint64"},{"name":"isAllowedToVote","type":"uint64"},{"name":"hasAlreadyVoted","type":"uint64"},{"name":"currentTime","type":"uint64"}]},"methods":[{"name":"create","args":[{"name":"vote_id","type":"string"},{"name":"snapshot_public_key","type":"byte[]"},{"name":"metadata_ipfs_cid","type":"string"},{"name":"start_time","type":"uint64"},{"name":"end_time","type":"uint64"},{"name":"option_counts","type":"uint8[]"},{"name":"quorum","type":"uint64"},{"name":"nft_image_url","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","args":[{"name":"fund_min_bal_req","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"close","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_preconditions","desc":"Returns the calculated pre-conditions for the voting round.","args":[{"name":"signature","type":"byte[]","desc":"The signature for the given voter account"}],"returns":{"type":"(uint64,uint64,uint64,uint64)","desc":"The precondition values","struct":"VotingPreconditions"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"vote","args":[{"name":"fund_min_bal_req","type":"pay"},{"name":"signature","type":"byte[]"},{"name":"answer_ids","type":"uint8[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":8,"bytes":5},"local":{"ints":0,"bytes":0}},"keys":{"global":{"close_time":{"key":"Y2xvc2VfdGltZQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the time the vote was closed"},"end_time":{"key":"ZW5kX3RpbWU=","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the ending time of voting"},"is_bootstrapped":{"key":"aXNfYm9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64","desc":"Whether or not the contract has been bootstrapped with answers"},"metadata_ipfs_cid":{"key":"bWV0YWRhdGFfaXBmc19jaWQ=","keyType":"AVMString","valueType":"AVMBytes","desc":"The IPFS content ID of the voting metadata file"},"nft_asset_id":{"key":"bmZ0X2Fzc2V0X2lk","keyType":"AVMString","valueType":"AVMUint64","desc":"The asset ID of a result NFT if one has been created"},"nft_image_url":{"key":"bmZ0X2ltYWdlX3VybA==","keyType":"AVMString","valueType":"AVMBytes","desc":"The IPFS URL of the default image to use as the media of the result NFT"},"option_counts":{"key":"b3B0aW9uX2NvdW50cw==","keyType":"AVMString","valueType":"AVMBytes","desc":"The number of options for each question"},"quorum":{"key":"cXVvcnVt","keyType":"AVMString","valueType":"AVMUint64","desc":"The minimum number of voters to reach quorum"},"snapshot_public_key":{"key":"c25hcHNob3RfcHVibGljX2tleQ==","keyType":"AVMString","valueType":"AVMBytes","desc":"The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot"},"start_time":{"key":"c3RhcnRfdGltZQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"The unix timestamp of the starting time of voting"},"total_options":{"key":"dG90YWxfb3B0aW9ucw==","keyType":"AVMString","valueType":"AVMUint64","desc":"The total number of options"},"vote_id":{"key":"dm90ZV9pZA==","keyType":"AVMString","valueType":"AVMBytes","desc":"The identifier of this voting round"},"voter_count":{"key":"dm90ZXJfY291bnQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"The minimum number of voters who have voted"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"},"bareActions":{"create":[],"call":["DeleteApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type VotingPreconditions = {
  isVotingOpen: bigint,
  isAllowedToVote: bigint,
  hasAlreadyVoted: bigint,
  currentTime: bigint
}


/**
 * Converts the ABI tuple representation of a VotingPreconditions to the struct representation
 */
export function VotingPreconditionsFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VotingPreconditions, APP_SPEC.structs) as VotingPreconditions
}

/**
 * The argument types for the VotingRoundApp contract
 */
export type VotingRoundAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': {
      voteId: string
      snapshotPublicKey: Uint8Array
      metadataIpfsCid: string
      startTime: bigint | number
      endTime: bigint | number
      optionCounts: bigint[] | number[]
      quorum: bigint | number
      nftImageUrl: string
    }
    'bootstrap(pay)void': {
      fundMinBalReq: AppMethodCallTransactionArgument
    }
    'close()void': Record<string, never>
    'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': {
      /**
       * The signature for the given voter account
       */
      signature: Uint8Array
    }
    'vote(pay,byte[],uint8[])void': {
      fundMinBalReq: AppMethodCallTransactionArgument
      signature: Uint8Array
      answerIds: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': [voteId: string, snapshotPublicKey: Uint8Array, metadataIpfsCid: string, startTime: bigint | number, endTime: bigint | number, optionCounts: bigint[] | number[], quorum: bigint | number, nftImageUrl: string]
    'bootstrap(pay)void': [fundMinBalReq: AppMethodCallTransactionArgument]
    'close()void': []
    'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': [signature: Uint8Array]
    'vote(pay,byte[],uint8[])void': [fundMinBalReq: AppMethodCallTransactionArgument, signature: Uint8Array, answerIds: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type VotingRoundAppReturns = {
  'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void': void
  'bootstrap(pay)void': void
  'close()void': void
  'get_preconditions(byte[])(uint64,uint64,uint64,uint64)': VotingPreconditions
  'vote(pay,byte[],uint8[])void': void
}

/**
 * Defines the types of available calls and state of the VotingRoundApp smart contract.
 */
export type VotingRoundAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void' | 'create', {
      argsObj: VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
      argsTuple: VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
      returns: VotingRoundAppReturns['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']
    }>
    & Record<'bootstrap(pay)void' | 'bootstrap', {
      argsObj: VotingRoundAppArgs['obj']['bootstrap(pay)void']
      argsTuple: VotingRoundAppArgs['tuple']['bootstrap(pay)void']
      returns: VotingRoundAppReturns['bootstrap(pay)void']
    }>
    & Record<'close()void' | 'close', {
      argsObj: VotingRoundAppArgs['obj']['close()void']
      argsTuple: VotingRoundAppArgs['tuple']['close()void']
      returns: VotingRoundAppReturns['close()void']
    }>
    & Record<'get_preconditions(byte[])(uint64,uint64,uint64,uint64)' | 'get_preconditions', {
      argsObj: VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
      argsTuple: VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
      /**
       * The precondition values
       */
      returns: VotingRoundAppReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
    }>
    & Record<'vote(pay,byte[],uint8[])void' | 'vote', {
      argsObj: VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void']
      argsTuple: VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']
      returns: VotingRoundAppReturns['vote(pay,byte[],uint8[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * The unix timestamp of the time the vote was closed
         */
        closeTime: bigint
        /**
         * The unix timestamp of the ending time of voting
         */
        endTime: bigint
        /**
         * Whether or not the contract has been bootstrapped with answers
         */
        isBootstrapped: bigint
        /**
         * The IPFS content ID of the voting metadata file
         */
        metadataIpfsCid: BinaryState
        /**
         * The asset ID of a result NFT if one has been created
         */
        nftAssetId: bigint
        /**
         * The IPFS URL of the default image to use as the media of the result NFT
         */
        nftImageUrl: BinaryState
        /**
         * The number of options for each question
         */
        optionCounts: BinaryState
        /**
         * The minimum number of voters to reach quorum
         */
        quorum: bigint
        /**
         * The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot
         */
        snapshotPublicKey: BinaryState
        /**
         * The unix timestamp of the starting time of voting
         */
        startTime: bigint
        /**
         * The total number of options
         */
        totalOptions: bigint
        /**
         * The identifier of this voting round
         */
        voteId: BinaryState
        /**
         * The minimum number of voters who have voted
         */
        voterCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VotingRoundAppSignatures = keyof VotingRoundAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VotingRoundAppNonVoidMethodSignatures = keyof VotingRoundAppTypes['methods'] extends infer T ? T extends keyof VotingRoundAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the VotingRoundApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VotingRoundAppSignatures> = VotingRoundAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VotingRoundApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotingRoundAppSignatures> = VotingRoundAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VotingRoundAppTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type VotingRoundAppCreateCallParams =
  | Expand<CallParams<VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & {method: 'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type VotingRoundAppDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type VotingRoundAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: VotingRoundAppCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: VotingRoundAppDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the VotingRoundApp smart contract
 */
export abstract class VotingRoundAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends VotingRoundAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void':
            return VotingRoundAppParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the VotingRoundApp smart contract using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.voteId, params.args.snapshotPublicKey, params.args.metadataIpfsCid, params.args.startTime, params.args.endTime, params.args.optionCounts, params.args.quorum, params.args.nftImageUrl],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<VotingRoundAppArgs['obj']['bootstrap(pay)void'] | VotingRoundAppArgs['tuple']['bootstrap(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundMinBalReq],
    }
  }
  /**
   * Constructs a no op call for the close()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static close(params: CallParams<VotingRoundAppArgs['obj']['close()void'] | VotingRoundAppArgs['tuple']['close()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'close()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the calculated pre-conditions for the voting round.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPreconditions(params: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_preconditions(byte[])(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the vote(pay,byte[],uint8[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(pay,byte[],uint8[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundMinBalReq, params.args.signature, params.args.answerIds],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the VotingRoundApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class VotingRoundAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `VotingRoundAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new VotingRoundAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new VotingRoundAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the VotingRoundApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: VotingRoundAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? VotingRoundAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (VotingRoundAppCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new VotingRoundAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingRoundApp smart contract using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(VotingRoundAppParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingRoundApp smart contract using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(VotingRoundAppParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VotingRoundApp smart contract using an ABI method call using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<VotingRoundAppArgs['obj']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void'] | VotingRoundAppArgs['tuple']['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(VotingRoundAppParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | VotingRoundAppReturns['create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void']) }, appClient: new VotingRoundAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the VotingRoundApp smart contract
 */
export class VotingRoundAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VotingRoundAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the VotingRoundApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VotingRoundAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VotingRoundAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `VotingRoundAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VotingRoundAppClient> {
    return new VotingRoundAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VotingRoundAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VotingRoundAppClient> {
    return new VotingRoundAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the VotingRoundApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<VotingRoundAppArgs['obj']['bootstrap(pay)void'] | VotingRoundAppArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundAppParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    close: (params: CallParams<VotingRoundAppArgs['obj']['close()void'] | VotingRoundAppArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(VotingRoundAppParamsFactory.close(params))
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the calculated pre-conditions for the voting round.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The precondition values
     */
    getPreconditions: (params: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundAppParamsFactory.getPreconditions(params))
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VotingRoundAppParamsFactory.vote(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the VotingRoundApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<VotingRoundAppArgs['obj']['bootstrap(pay)void'] | VotingRoundAppArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundAppParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    close: (params: CallParams<VotingRoundAppArgs['obj']['close()void'] | VotingRoundAppArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(VotingRoundAppParamsFactory.close(params))
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the calculated pre-conditions for the voting round.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The precondition values
     */
    getPreconditions: (params: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundAppParamsFactory.getPreconditions(params))
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VotingRoundAppParamsFactory.vote(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the VotingRoundApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `bootstrap(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<VotingRoundAppArgs['obj']['bootstrap(pay)void'] | VotingRoundAppArgs['tuple']['bootstrap(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundAppParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundAppReturns['bootstrap(pay)void'])}
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `close()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    close: async (params: CallParams<VotingRoundAppArgs['obj']['close()void'] | VotingRoundAppArgs['tuple']['close()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(VotingRoundAppParamsFactory.close(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundAppReturns['close()void'])}
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the calculated pre-conditions for the voting round.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The precondition values
     */
    getPreconditions: async (params: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundAppParamsFactory.getPreconditions(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundAppReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the VotingRoundApp smart contract using the `vote(pay,byte[],uint8[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VotingRoundAppParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | VotingRoundAppReturns['vote(pay,byte[],uint8[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VotingRoundAppClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the VotingRoundApp smart contract using the `get_preconditions(byte[])(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the calculated pre-conditions for the voting round.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The precondition values
   */
  async getPreconditions(params: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(VotingRoundAppParamsFactory.getPreconditions(params))
    return result.return as unknown as VotingRoundAppReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current VotingRoundApp app
   */
  state = {
    /**
     * Methods to access global state for the current VotingRoundApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          closeTime: result.close_time,
          endTime: result.end_time,
          isBootstrapped: result.is_bootstrapped,
          metadataIpfsCid: new BinaryStateValue(result.metadata_ipfs_cid),
          nftAssetId: result.nft_asset_id,
          nftImageUrl: new BinaryStateValue(result.nft_image_url),
          optionCounts: new BinaryStateValue(result.option_counts),
          quorum: result.quorum,
          snapshotPublicKey: new BinaryStateValue(result.snapshot_public_key),
          startTime: result.start_time,
          totalOptions: result.total_options,
          voteId: new BinaryStateValue(result.vote_id),
          voterCount: result.voter_count,
        }
      },
      /**
       * Get the current value of the close_time key in global state
       */
      closeTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("close_time")) as bigint | undefined },
      /**
       * Get the current value of the end_time key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("end_time")) as bigint | undefined },
      /**
       * Get the current value of the is_bootstrapped key in global state
       */
      isBootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the metadata_ipfs_cid key in global state
       */
      metadataIpfsCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("metadata_ipfs_cid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the nft_asset_id key in global state
       */
      nftAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nft_asset_id")) as bigint | undefined },
      /**
       * Get the current value of the nft_image_url key in global state
       */
      nftImageUrl: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("nft_image_url")) as Uint8Array | undefined) },
      /**
       * Get the current value of the option_counts key in global state
       */
      optionCounts: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("option_counts")) as Uint8Array | undefined) },
      /**
       * Get the current value of the quorum key in global state
       */
      quorum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum")) as bigint | undefined },
      /**
       * Get the current value of the snapshot_public_key key in global state
       */
      snapshotPublicKey: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("snapshot_public_key")) as Uint8Array | undefined) },
      /**
       * Get the current value of the start_time key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("start_time")) as bigint | undefined },
      /**
       * Get the current value of the total_options key in global state
       */
      totalOptions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_options")) as bigint | undefined },
      /**
       * Get the current value of the vote_id key in global state
       */
      voteId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("vote_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the voter_count key in global state
       */
      voterCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voter_count")) as bigint | undefined },
    },
  }

  public newGroup(): VotingRoundAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(pay)void method call against the VotingRoundApp contract
       */
      bootstrap(params: CallParams<VotingRoundAppArgs['obj']['bootstrap(pay)void'] | VotingRoundAppArgs['tuple']['bootstrap(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a close()void method call against the VotingRoundApp contract
       */
      close(params: CallParams<VotingRoundAppArgs['obj']['close()void'] | VotingRoundAppArgs['tuple']['close()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.close(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_preconditions(byte[])(uint64,uint64,uint64,uint64) method call against the VotingRoundApp contract
       */
      getPreconditions(params: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPreconditions(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_preconditions(byte[])(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a vote(pay,byte[],uint8[])void method call against the VotingRoundApp contract
       */
      vote(params: CallParams<VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the VotingRoundApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VotingRoundAppComposer
  }
}
export type VotingRoundAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<VotingRoundAppArgs['obj']['bootstrap(pay)void'] | VotingRoundAppArgs['tuple']['bootstrap(pay)void']>): VotingRoundAppComposer<[...TReturns, VotingRoundAppReturns['bootstrap(pay)void'] | undefined]>

  /**
   * Calls the close()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  close(params?: CallParams<VotingRoundAppArgs['obj']['close()void'] | VotingRoundAppArgs['tuple']['close()void']>): VotingRoundAppComposer<[...TReturns, VotingRoundAppReturns['close()void'] | undefined]>

  /**
   * Calls the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the calculated pre-conditions for the voting round.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPreconditions(params?: CallParams<VotingRoundAppArgs['obj']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | VotingRoundAppArgs['tuple']['get_preconditions(byte[])(uint64,uint64,uint64,uint64)']>): VotingRoundAppComposer<[...TReturns, VotingRoundAppReturns['get_preconditions(byte[])(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the vote(pay,byte[],uint8[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<VotingRoundAppArgs['obj']['vote(pay,byte[],uint8[])void'] | VotingRoundAppArgs['tuple']['vote(pay,byte[],uint8[])void']>): VotingRoundAppComposer<[...TReturns, VotingRoundAppReturns['vote(pay,byte[],uint8[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the VotingRoundApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): VotingRoundAppComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VotingRoundApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VotingRoundAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VotingRoundAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VotingRoundAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VotingRoundAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VotingRoundAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VotingRoundAppComposerResults<TReturns>>
}
export type VotingRoundAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

